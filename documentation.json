{
    "pipes": [
        {
            "name": "AsyncLoading",
            "id": "pipe-AsyncLoading-fae2e649c5f8d2895a74b596a7b6c6b4",
            "file": "src/shared/pipes/async-loading.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "obj",
                            "type": "Observable<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "Observable<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "val",
                            "type": "Observable<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "Observable<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "asyncLoading",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { isObservable, of, Observable } from 'rxjs';\r\nimport { map, startWith, catchError } from 'rxjs/operators';\r\n\r\n@Pipe({\r\n  name: 'asyncLoading',\r\n})\r\nexport class AsyncLoading implements PipeTransform {\r\n  \r\n  transform<T>(obj: Observable<T>): Observable<{loading: boolean, value?:T, error?: any}>;\r\n  transform(val: Observable<any>): any {\r\n    return isObservable(val)\r\n      ? val.pipe(\r\n        map(value => ({ loading: false, value })),\r\n        startWith({ loading: true }),\r\n        catchError(error => of({ loading: false, error }))\r\n      )\r\n      : val;\r\n  }\r\n}\r\n"
        },
        {
            "name": "EllipsisPipe",
            "id": "pipe-EllipsisPipe-b07b6da8b0f3da89e137d10aa572c1c0",
            "file": "src/shared/pipes/ellipsis.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "size",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "size",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "ellipsis",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { isObservable, of, Observable } from 'rxjs';\r\nimport { map, startWith, catchError } from 'rxjs/operators';\r\n\r\n@Pipe({\r\n  name: 'ellipsis',\r\n})\r\nexport class EllipsisPipe implements PipeTransform {\r\n\r\n  transform(val: string, size: number): any {\r\n    if (val.length > size) {\r\n      return val.substring(0, size - 3) + '...';\r\n    }\r\n    return val;\r\n  }\r\n}\r\n"
        },
        {
            "name": "FilterByDescription",
            "id": "pipe-FilterByDescription-db7981c0e98685d5e7fd37bb42b01ba2",
            "file": "src/app/home/job-list/filter-by-description.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "photos",
                            "type": "JobModel[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "descriptionQuery",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "photos",
                            "type": "JobModel[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "descriptionQuery",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "filterByDescription",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { JobModel } from './job-list.models';\r\n\r\n@Pipe({ name: 'filterByDescription'})\r\nexport class FilterByDescription implements PipeTransform {\r\n\r\n    transform(photos: JobModel[], descriptionQuery: string) {\r\n        descriptionQuery = descriptionQuery\r\n            .trim()\r\n            .toLowerCase();\r\n\r\n        if(descriptionQuery) {\r\n            return photos.filter(photo =>\r\n                photo.description.toLowerCase().includes(descriptionQuery)\r\n            );\r\n        } else {\r\n            return photos;\r\n        }\r\n    }\r\n}"
        },
        {
            "name": "FilterByJob",
            "id": "pipe-FilterByJob-5c831ba8b934b97f7cd563c6221c719c",
            "file": "src/app/home/filter-by-job.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "jobs",
                            "type": "JobModel[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "descriptionQuery",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "jobs",
                            "type": "JobModel[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "descriptionQuery",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "filterByJob",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { JobModel } from './job-list/job-list.models';\r\n\r\n@Pipe({ name: 'filterByJob'})\r\nexport class FilterByJob implements PipeTransform {\r\n\r\n    transform(jobs: JobModel[], descriptionQuery: string) {\r\n        descriptionQuery = descriptionQuery\r\n            .trim()\r\n            .toLowerCase();\r\n\r\n        if(descriptionQuery) {\r\n            return jobs.filter( job=>\r\n                job.title.toLowerCase().includes(descriptionQuery)\r\n            );\r\n        } else {\r\n            return jobs;\r\n        }\r\n    }\r\n}"
        }
    ],
    "interfaces": [
        {
            "name": "CompanyModel",
            "id": "interface-CompanyModel-13d0859c94c3b51b033926dee6b143e5",
            "file": "src/app/new-company/new-company.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CompanyModel {\r\n\r\n  id: number;\r\n  cnpj: String\r\n  name: String\r\n  street: String\r\n  number: Number\r\n  complement: String\r\n  cep: String\r\n  city: String\r\n  state: String\r\n\r\n}\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "cep",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "cnpj",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "complement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "street",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "CompanyModel",
            "id": "interface-CompanyModel-08b70688dbe0633c6f550ca77ab38f5e-1",
            "file": "src/app/home/job-list/job-list.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface JobModel {\r\n\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  salary: Number;\r\n  knowledges: { id: number, name: string }[];\r\n  city: string;\r\n  companyLogo?: string;\r\n\r\n}\r\n\r\nexport interface JobDetailsModel {\r\n  id:              number;\r\n  title:           string;\r\n  description:     string;\r\n  fullDescription: string;\r\n  salary:          number;\r\n  knowledges:      Knowledge[];\r\n  company:         CompanyModel;\r\n}\r\n\r\nexport interface Knowledge {\r\n  id:   number;\r\n  name: string;\r\n  jobs?: any[];\r\n}\r\n\r\n\r\nexport interface CompanyModel {\r\n  id:         number;\r\n  name:       string;\r\n  city:       string;\r\n  state:      string;\r\n  street:     null;\r\n  number:     number;\r\n  complement: string;\r\n  logoUrl:    string;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "complement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "logoUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "street",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "CompanyModel-1"
        },
        {
            "name": "ICategoria",
            "id": "interface-ICategoria-763bab0beca257cb6ba14a30b85b4487",
            "file": "src/app/new-job/new-job.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { StringMapWithRename } from \"@angular/compiler/src/compiler_facade_interface\";\r\n\r\ninterface IParam {\r\n    id: number;\r\n    label: string;\r\n  }\r\n\r\n  export interface TypeJob {\r\n\r\n    Tecnologia: String\r\n    Engenharia: String\r\n    Industria: Number\r\n    Educação: String\r\n    Financeiro: String\r\n    Artes: String\r\n    Administração: String\r\n    Saúde: Number\r\n    Transportes: String\r\n    Construção: String\r\n\r\n}\r\n\r\nexport interface TypeSalary {\r\n\r\n  Entre2000e3000: String\r\n  Entre1000e2000: String\r\n  Entre4000e6000: Number\r\n  Ate1000: String\r\n  Entre3000e4000: String\r\n  AcimaDe6000: StringMapWithRename\r\n\r\n}\r\n\r\nexport interface NewJob {\r\n  title: string;\r\n  description: string;\r\n  salary: string;\r\n  occupation: string;\r\n  companyId: string;\r\n}\r\n\r\n\r\n  export interface ICategoria extends IParam {\r\n\r\n  }\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "IParam"
        },
        {
            "name": "IParam",
            "id": "interface-IParam-763bab0beca257cb6ba14a30b85b4487",
            "file": "src/app/new-job/new-job.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { StringMapWithRename } from \"@angular/compiler/src/compiler_facade_interface\";\r\n\r\ninterface IParam {\r\n    id: number;\r\n    label: string;\r\n  }\r\n\r\n  export interface TypeJob {\r\n\r\n    Tecnologia: String\r\n    Engenharia: String\r\n    Industria: Number\r\n    Educação: String\r\n    Financeiro: String\r\n    Artes: String\r\n    Administração: String\r\n    Saúde: Number\r\n    Transportes: String\r\n    Construção: String\r\n\r\n}\r\n\r\nexport interface TypeSalary {\r\n\r\n  Entre2000e3000: String\r\n  Entre1000e2000: String\r\n  Entre4000e6000: Number\r\n  Ate1000: String\r\n  Entre3000e4000: String\r\n  AcimaDe6000: StringMapWithRename\r\n\r\n}\r\n\r\nexport interface NewJob {\r\n  title: string;\r\n  description: string;\r\n  salary: string;\r\n  occupation: string;\r\n  companyId: string;\r\n}\r\n\r\n\r\n  export interface ICategoria extends IParam {\r\n\r\n  }\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "JobDetailsModel",
            "id": "interface-JobDetailsModel-08b70688dbe0633c6f550ca77ab38f5e",
            "file": "src/app/home/job-list/job-list.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface JobModel {\r\n\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  salary: Number;\r\n  knowledges: { id: number, name: string }[];\r\n  city: string;\r\n  companyLogo?: string;\r\n\r\n}\r\n\r\nexport interface JobDetailsModel {\r\n  id:              number;\r\n  title:           string;\r\n  description:     string;\r\n  fullDescription: string;\r\n  salary:          number;\r\n  knowledges:      Knowledge[];\r\n  company:         CompanyModel;\r\n}\r\n\r\nexport interface Knowledge {\r\n  id:   number;\r\n  name: string;\r\n  jobs?: any[];\r\n}\r\n\r\n\r\nexport interface CompanyModel {\r\n  id:         number;\r\n  name:       string;\r\n  city:       string;\r\n  state:      string;\r\n  street:     null;\r\n  number:     number;\r\n  complement: string;\r\n  logoUrl:    string;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "company",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CompanyModel",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "fullDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "knowledges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Knowledge[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "salary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "JobModel",
            "id": "interface-JobModel-08b70688dbe0633c6f550ca77ab38f5e",
            "file": "src/app/home/job-list/job-list.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface JobModel {\r\n\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  salary: Number;\r\n  knowledges: { id: number, name: string }[];\r\n  city: string;\r\n  companyLogo?: string;\r\n\r\n}\r\n\r\nexport interface JobDetailsModel {\r\n  id:              number;\r\n  title:           string;\r\n  description:     string;\r\n  fullDescription: string;\r\n  salary:          number;\r\n  knowledges:      Knowledge[];\r\n  company:         CompanyModel;\r\n}\r\n\r\nexport interface Knowledge {\r\n  id:   number;\r\n  name: string;\r\n  jobs?: any[];\r\n}\r\n\r\n\r\nexport interface CompanyModel {\r\n  id:         number;\r\n  name:       string;\r\n  city:       string;\r\n  state:      string;\r\n  street:     null;\r\n  number:     number;\r\n  complement: string;\r\n  logoUrl:    string;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "companyLogo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "knowledges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "salary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "Knowledge",
            "id": "interface-Knowledge-08b70688dbe0633c6f550ca77ab38f5e",
            "file": "src/app/home/job-list/job-list.models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface JobModel {\r\n\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  salary: Number;\r\n  knowledges: { id: number, name: string }[];\r\n  city: string;\r\n  companyLogo?: string;\r\n\r\n}\r\n\r\nexport interface JobDetailsModel {\r\n  id:              number;\r\n  title:           string;\r\n  description:     string;\r\n  fullDescription: string;\r\n  salary:          number;\r\n  knowledges:      Knowledge[];\r\n  company:         CompanyModel;\r\n}\r\n\r\nexport interface Knowledge {\r\n  id:   number;\r\n  name: string;\r\n  jobs?: any[];\r\n}\r\n\r\n\r\nexport interface CompanyModel {\r\n  id:         number;\r\n  name:       string;\r\n  city:       string;\r\n  state:      string;\r\n  street:     null;\r\n  number:     number;\r\n  complement: string;\r\n  logoUrl:    string;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "jobs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "NewJob",
            "id": "interface-NewJob-763bab0beca257cb6ba14a30b85b4487",
            "file": "src/app/new-job/new-job.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { StringMapWithRename } from \"@angular/compiler/src/compiler_facade_interface\";\r\n\r\ninterface IParam {\r\n    id: number;\r\n    label: string;\r\n  }\r\n\r\n  export interface TypeJob {\r\n\r\n    Tecnologia: String\r\n    Engenharia: String\r\n    Industria: Number\r\n    Educação: String\r\n    Financeiro: String\r\n    Artes: String\r\n    Administração: String\r\n    Saúde: Number\r\n    Transportes: String\r\n    Construção: String\r\n\r\n}\r\n\r\nexport interface TypeSalary {\r\n\r\n  Entre2000e3000: String\r\n  Entre1000e2000: String\r\n  Entre4000e6000: Number\r\n  Ate1000: String\r\n  Entre3000e4000: String\r\n  AcimaDe6000: StringMapWithRename\r\n\r\n}\r\n\r\nexport interface NewJob {\r\n  title: string;\r\n  description: string;\r\n  salary: string;\r\n  occupation: string;\r\n  companyId: string;\r\n}\r\n\r\n\r\n  export interface ICategoria extends IParam {\r\n\r\n  }\r\n",
            "properties": [
                {
                    "name": "companyId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "occupation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "salary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "NewUser",
            "id": "interface-NewUser-e4632ae6c3b67f320e3a28f9b0287aad",
            "file": "src/app/login-home/signup/new-user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface NewUser {\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    cpf: string;\r\n    gender: string;\r\n    phone: string;\r\n    recruiter: boolean;\r\n    password: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "cpf",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "recruiter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "Registrations",
            "id": "interface-Registrations-e92eb98554a4bf9ac070b757c89890cf",
            "file": "src/app/registrations/registrations.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Registrations {\r\n\r\n    id: Number\r\n    title: String\r\n    salary: Number\r\n    occupation: String\r\n    city: String\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "occupation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "salary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "Role",
            "id": "interface-Role-66267bd3a0b2e61e620ab15ae1b23d36",
            "file": "src/app/login-home/user.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Role {\r\n  id: number;\r\n  name: string;\r\n  authority: string;\r\n}\r\n\r\nexport interface Token {\r\n  token: string;\r\n  type: string;\r\n  user: User;\r\n}\r\n\r\nexport interface User {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  cpf: string;\r\n  phone: string;\r\n  profilePic: string;\r\n  roles: Role[];\r\n  emailVerified: boolean;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "authority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "Token",
            "id": "interface-Token-66267bd3a0b2e61e620ab15ae1b23d36",
            "file": "src/app/login-home/user.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Role {\r\n  id: number;\r\n  name: string;\r\n  authority: string;\r\n}\r\n\r\nexport interface Token {\r\n  token: string;\r\n  type: string;\r\n  user: User;\r\n}\r\n\r\nexport interface User {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  cpf: string;\r\n  phone: string;\r\n  profilePic: string;\r\n  roles: Role[];\r\n  emailVerified: boolean;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "TypeJob",
            "id": "interface-TypeJob-763bab0beca257cb6ba14a30b85b4487",
            "file": "src/app/new-job/new-job.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { StringMapWithRename } from \"@angular/compiler/src/compiler_facade_interface\";\r\n\r\ninterface IParam {\r\n    id: number;\r\n    label: string;\r\n  }\r\n\r\n  export interface TypeJob {\r\n\r\n    Tecnologia: String\r\n    Engenharia: String\r\n    Industria: Number\r\n    Educação: String\r\n    Financeiro: String\r\n    Artes: String\r\n    Administração: String\r\n    Saúde: Number\r\n    Transportes: String\r\n    Construção: String\r\n\r\n}\r\n\r\nexport interface TypeSalary {\r\n\r\n  Entre2000e3000: String\r\n  Entre1000e2000: String\r\n  Entre4000e6000: Number\r\n  Ate1000: String\r\n  Entre3000e4000: String\r\n  AcimaDe6000: StringMapWithRename\r\n\r\n}\r\n\r\nexport interface NewJob {\r\n  title: string;\r\n  description: string;\r\n  salary: string;\r\n  occupation: string;\r\n  companyId: string;\r\n}\r\n\r\n\r\n  export interface ICategoria extends IParam {\r\n\r\n  }\r\n",
            "properties": [
                {
                    "name": "Administração",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "Artes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "Construção",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "Educação",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "Engenharia",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "Financeiro",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "Industria",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "Saúde",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "Tecnologia",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "Transportes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "TypeSalary",
            "id": "interface-TypeSalary-763bab0beca257cb6ba14a30b85b4487",
            "file": "src/app/new-job/new-job.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { StringMapWithRename } from \"@angular/compiler/src/compiler_facade_interface\";\r\n\r\ninterface IParam {\r\n    id: number;\r\n    label: string;\r\n  }\r\n\r\n  export interface TypeJob {\r\n\r\n    Tecnologia: String\r\n    Engenharia: String\r\n    Industria: Number\r\n    Educação: String\r\n    Financeiro: String\r\n    Artes: String\r\n    Administração: String\r\n    Saúde: Number\r\n    Transportes: String\r\n    Construção: String\r\n\r\n}\r\n\r\nexport interface TypeSalary {\r\n\r\n  Entre2000e3000: String\r\n  Entre1000e2000: String\r\n  Entre4000e6000: Number\r\n  Ate1000: String\r\n  Entre3000e4000: String\r\n  AcimaDe6000: StringMapWithRename\r\n\r\n}\r\n\r\nexport interface NewJob {\r\n  title: string;\r\n  description: string;\r\n  salary: string;\r\n  occupation: string;\r\n  companyId: string;\r\n}\r\n\r\n\r\n  export interface ICategoria extends IParam {\r\n\r\n  }\r\n",
            "properties": [
                {
                    "name": "AcimaDe6000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StringMapWithRename",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "Ate1000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "Entre1000e2000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "Entre2000e3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "Entre3000e4000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "Entre4000e6000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Number",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-66267bd3a0b2e61e620ab15ae1b23d36",
            "file": "src/app/login-home/user.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Role {\r\n  id: number;\r\n  name: string;\r\n  authority: string;\r\n}\r\n\r\nexport interface Token {\r\n  token: string;\r\n  type: string;\r\n  user: User;\r\n}\r\n\r\nexport interface User {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  cpf: string;\r\n  phone: string;\r\n  profilePic: string;\r\n  roles: Role[];\r\n  emailVerified: boolean;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "cpf",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "emailVerified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "profilePic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "CookieService",
            "id": "injectable-CookieService-05e77e1e4285f76dc493245fd15d2489",
            "file": "src/app/cookie.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "cname",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cname",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "cname",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cname",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "cname",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cvalue",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "exdays",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cname",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cvalue",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "exdays",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { from, Observable } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpInterceptor } from '@angular/common/http';\r\nimport { HttpRequest } from '@angular/common/http';\r\nimport { HttpHandler } from '@angular/common/http';\r\nimport { HttpEvent } from '@angular/common/http';\r\nimport { HttpHeaders } from '@angular/common/http';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class CookieService {\r\n\r\n  delete(cname: string) {\r\n     console.log('deletando cookie: ' + cname);\r\n     \r\n      document.cookie = cname + \"=\" + ';expires=Thu, 01 Jan 1970 00:00:01 GMT' + \";path=/\";\r\n      console.log(document.cookie);\r\n      \r\n  }\r\n\r\n   get(cname) {\r\n    var name = cname + \"=\";\r\n    var decodedCookie = decodeURIComponent(document.cookie);\r\n    var ca = decodedCookie.split(';');\r\n    for(var i = 0; i <ca.length; i++) {\r\n      var c = ca[i];\r\n      while (c.charAt(0) == ' ') {\r\n        c = c.substring(1);\r\n      }\r\n      if (c.indexOf(name) == 0) {\r\n        return c.substring(name.length, c.length);\r\n      }\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n   set(cname, cvalue, exdays) {\r\n    var d = new Date();\r\n    d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));\r\n    var expires = \"expires=\" + d.toUTCString();\r\n    document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\r\n}\r\n\r\n}",
            "type": "injectable"
        },
        {
            "name": "HomeLoginService",
            "id": "injectable-HomeLoginService-ee6ddbcc8a6d0631c0097d72f41a899b",
            "file": "src/app/login-home/login-home.service.ts",
            "properties": [
                {
                    "name": "_loggedUser$",
                    "defaultValue": "new BehaviorSubject<TokenDto.User | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "authenticate",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "novaSenha",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "passwordConfirmation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "passwordConfirmation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reloadUser",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendEmail",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signup",
                    "args": [
                        {
                            "name": "newUser",
                            "type": "NewUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newUser",
                            "type": "NewUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { NewUser } from './signup/new-user';\r\nimport { environment } from 'src/environments/environment';\r\nimport { delay, take, tap } from 'rxjs/operators';\r\nimport { CookieService } from '../cookie.service';\r\nimport { MyService } from '../globals';\r\nimport { Router } from '@angular/router';\r\nimport * as TokenDto from './user.model';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\n\r\nconst API_URL = environment.api + '/auth/';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HomeLoginService {\r\n  constructor(private http: HttpClient, private cookie: CookieService, private myService: MyService, private router: Router) {\r\n    this.reloadUser()\r\n      .pipe(\r\n        take(1)\r\n      ).subscribe()\r\n  }\r\n\r\n  get isLogged() {\r\n    return this.cookie.get('Authorization').length > 0;\r\n  }\r\n\r\n  private _loggedUser$ = new BehaviorSubject<TokenDto.User | null>(null);\r\n\r\n  get loggedUser$(): Observable<TokenDto.User | null> {\r\n    return this._loggedUser$.asObservable();\r\n  }\r\n\r\n  reloadUser() {\r\n    return this.http.get<TokenDto.User>(environment.api + '/users/me').pipe(\r\n      tap(user => this._loggedUser$.next(user))\r\n    )\r\n  }\r\n\r\n  authenticate(email: string, password: string) {\r\n\r\n    return this.http.post<TokenDto.Token>(API_URL + 'login', { email, password }).pipe(\r\n      tap(e => {\r\n        this.myService.setValue(e.user.id);\r\n        console.log(this.myService.getId);\r\n\r\n        this._loggedUser$.next(e.user);\r\n\r\n        console.log(e);\r\n\r\n\r\n        this.cookie.set('userId', e.user.id, 0.1);\r\n        this.cookie.set('Authorization', e.token, 0.1)\r\n      })\r\n    );\r\n  }\r\n\r\n  signup(newUser: NewUser) {\r\n    const firstName = newUser.firstName;\r\n    const lastName = newUser.lastName;\r\n    const email = newUser.email;\r\n    const password = newUser.password;\r\n    const gender = newUser.gender;\r\n    const cpf = newUser.cpf;\r\n    const phone = newUser.phone;\r\n    const recruiter = newUser.recruiter;\r\n\r\n    return this.http.post(API_URL + 'signup', { firstName, lastName, email, password, gender, cpf, phone, recruiter });\r\n  }\r\n\r\n  sendEmail(email: string) {\r\n    const params = new HttpParams({\r\n      fromObject: {\r\n        email: email\r\n      }\r\n    });\r\n\r\n    return this.http.post(API_URL + 'reset-password?', {}, { params: params, responseType: 'text' });\r\n  }\r\n\r\n  novaSenha(token: string, password: string, passwordConfirmation: string) {\r\n    return this.http.post(API_URL + 'reset-password/handle', { token, password, passwordConfirmation }, { responseType: 'text' });\r\n  }\r\n\r\n  logout() {\r\n    this.cookie.delete('token');\r\n    this.cookie.delete('userId');\r\n    this._loggedUser$.next(null);\r\n    this.router.navigate(['/'])\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cookie",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "myService",
                        "type": "MyService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cookie",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "myService",
                        "type": "MyService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isLogged": {
                    "name": "isLogged",
                    "getSignature": {
                        "name": "isLogged",
                        "type": "",
                        "returnType": "",
                        "line": 24
                    }
                },
                "loggedUser$": {
                    "name": "loggedUser$",
                    "getSignature": {
                        "name": "loggedUser$",
                        "type": "",
                        "returnType": "Observable<TokenDto.User | null>",
                        "line": 30
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "JobListService",
            "id": "injectable-JobListService-a2729e55fe6838d88ef05655f61671a7",
            "file": "src/app/home/job-list/job-list.service.ts",
            "properties": [
                {
                    "name": "_url",
                    "defaultValue": "\"http://localhost:8080/jobs\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "apply",
                    "args": [
                        {
                            "name": "idJob",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "idJob",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getJob",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getJobs",
                    "args": [
                        {
                            "name": "category",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "salary",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "salary",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getKnowledges",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSalaries",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { JobDetailsModel, JobModel, Knowledge } from './job-list.models';\r\nimport { environment } from 'src/environments/environment';\r\nimport { CookieService } from 'src/app/cookie.service';\r\nimport { TypeSalary } from \"src/app/new-job/new-job.model\";\r\n\r\nconst API_URL = environment.api + '/jobs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JobListService {\r\n  public _url: string = \"http://localhost:8080/jobs\";\r\n\r\n  constructor(private http: HttpClient, private cookie: CookieService) { }\r\n\r\n  getJob(id: number) {\r\n    return this.http.get<JobDetailsModel>(`${this._url}/${id}`)\r\n  }\r\n\r\n  getJobs(category: any, salary: any, query: string) {\r\n\r\n\r\n    const params: any = {};\r\n\r\n    if (category && category !== 'Todos') {\r\n      params.occupation = category;\r\n    }\r\n\r\n    if (salary) {\r\n      params.salary = salary;\r\n    }\r\n\r\n    if (query && query !== '') {\r\n      params.title = query;\r\n    }\r\n\r\n    const httpOptions = {\r\n      params\r\n    };\r\n\r\n    return this.http.get<JobModel[]>(API_URL, httpOptions);\r\n  }\r\n\r\n  apply(idJob: any) {\r\n    const params = new HttpParams({\r\n        fromObject: {\r\n            id: idJob\r\n        }\r\n    });\r\n\r\n    return this.http.post(API_URL +'/' + idJob+'/apply', {},);\r\n  }\r\n\r\n  getSalaries() {\r\n    return this.http.get<TypeSalary>(`${this._url}/salaries`)\r\n  }\r\n\r\n  getKnowledges() {\r\n    return this.http.get<Knowledge[]>(`${this._url}/knowledge`)\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cookie",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cookie",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MyService",
            "id": "injectable-MyService-f00abdf65bb8563d78dfdaf9c1d3158f",
            "file": "src/app/globals.ts",
            "properties": [
                {
                    "name": "userIdop",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "getId",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class MyService {\r\n\r\n  userIdop : number = -1;\r\n  constructor(){}\r\n\r\n  setValue(value: number){\r\n           this.userIdop = value\r\n     }\r\n\r\n  getId(){\r\n  return this.userIdop;\r\n    }\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "NewCompanyService",
            "id": "injectable-NewCompanyService-d5b318e78f6a646bb1864acfa2fd0e9f",
            "file": "src/app/new-company/new-company.service.ts",
            "properties": [
                {
                    "name": "_url",
                    "defaultValue": "`http://localhost:8080/users/`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createCompany",
                    "args": [
                        {
                            "name": "newCompany",
                            "type": "CompanyModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newCompany",
                            "type": "CompanyModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllCompanies",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { environment as env } from 'src/environments/environment';\r\nimport { CompanyModel } from './new-company.model';\r\nimport { CookieService } from '../cookie.service';\r\n\r\nconst API_URL = env.api + '/users/';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NewCompanyService {\r\n\r\n  public _url: string = `http://localhost:8080/users/`;\r\n\r\n\r\n  constructor(private http: HttpClient,\r\n    private cookie: CookieService) { }\r\n\r\n\r\n  createCompany(newCompany: CompanyModel) {\r\n    const headertste = 'Bearer ' + this.cookie.get(\"token\")\r\n\r\n    let headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': headertste\r\n    });\r\n\r\n    let options = { headers: headers };\r\n\r\n    const cnpj = newCompany.cnpj;\r\n    const name = newCompany.name;\r\n    const street = newCompany.street;\r\n    const number = newCompany.number;\r\n    const complement = newCompany.complement;\r\n    const cep = newCompany.cep;\r\n    const city = newCompany.city;\r\n    const state = newCompany.state;\r\n\r\n    return this.http.post<CompanyModel>(`${API_URL}${this.cookie.get('userId')}/companies`,\r\n    { cnpj, name, street, number, complement, cep, city, state }, options);\r\n  }\r\n\r\n\r\n  getAllCompanies() {\r\n    const header = {\r\n      'Authorization': 'Bearer ' + this.cookie.get(\"token\")\r\n    }\r\n\r\n    const headerToken = {\r\n      headers: new HttpHeaders(header),\r\n    };\r\n\r\n    return this.http.get<CompanyModel[]>(`${API_URL}${this.cookie.get('userId')}/companies`, headerToken);\r\n  }\r\n\r\n\r\n\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cookie",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cookie",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NewJobService",
            "id": "injectable-NewJobService-43559dfbc3c5c9c4e5964d0860030013",
            "file": "src/app/new-job/new-job.service.ts",
            "properties": [
                {
                    "name": "_url",
                    "defaultValue": "\"http://localhost:8080/jobs/\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_urlCompanie",
                    "defaultValue": "\"http://localhost:8080/users/\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createJob",
                    "args": [
                        {
                            "name": "newjob",
                            "type": "NewJob",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newjob",
                            "type": "NewJob",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllCompanies",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAreas",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSalary",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { environment as env } from 'src/environments/environment';\r\nimport { ICategoria, NewJob, TypeJob, TypeSalary } from './new-job.model';\r\nimport { CompanyModel } from '../new-company/new-company.model';\r\nimport { CookieService } from '../cookie.service';\r\nimport { MyService } from '../globals';\r\n\r\nconst API_URL = env.api + '/jobs/';\r\nconst API_URL_COMPANIE = env.api + '/users/';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NewJobService {\r\n\r\n  public _url: string = \"http://localhost:8080/jobs/\";\r\n  public _urlCompanie: string = \"http://localhost:8080/users/\";\r\n\r\n  constructor(private http: HttpClient, private cookie: CookieService, private myService: MyService) { }\r\n\r\n  getAreas() {\r\n    const header = {\r\n      'Authorization': 'Bearer ' + this.cookie.get(\"token\")\r\n    }\r\n\r\n    const headerToken = {\r\n      headers: new HttpHeaders(header),\r\n    };\r\n\r\n    return this.http.get<TypeJob>(API_URL + 'occupations', headerToken)\r\n  }\r\n\r\n  getSalary() {\r\n    const header = {\r\n      'Authorization': 'Bearer ' + this.cookie.get(\"token\")\r\n    }\r\n\r\n    const headerToken = {\r\n      headers: new HttpHeaders(header),\r\n    };\r\n\r\n    return this.http.get<TypeSalary>(API_URL + 'salaries', headerToken)\r\n  }\r\n\r\n  createJob(newjob: NewJob) {\r\n    const headertste = 'Bearer ' + this.cookie.get(\"token\")\r\n\r\n\r\n    let headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': headertste\r\n    });\r\n    let options = { headers: headers };\r\n\r\n    const title = newjob.title;\r\n    const description = newjob.description;\r\n    const salary = newjob.salary;\r\n    const occupation = newjob.occupation;\r\n    const companyId = newjob.companyId;\r\n\r\n\r\n    return this.http.post(API_URL, { title, description, salary, occupation, companyId }, options);\r\n\r\n  }\r\n\r\n  getAllCompanies() {\r\n    const header = {\r\n      'Authorization': 'Bearer ' + this.cookie.get(\"token\")\r\n    }\r\n\r\n    const headerToken = {\r\n      headers: new HttpHeaders(header),\r\n    };\r\n\r\n\r\n    return this.http.get<CompanyModel[]>(`${API_URL_COMPANIE}${this.cookie.get('userId')}/companies`, headerToken);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cookie",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "myService",
                        "type": "MyService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cookie",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "myService",
                        "type": "MyService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RegistrationsService",
            "id": "injectable-RegistrationsService-3511a0189ee3ecb27a16561626c0a900",
            "file": "src/app/registrations/registrations.service.ts",
            "properties": [
                {
                    "name": "_url",
                    "defaultValue": "environment.api + \"/users/\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getAllRegister",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { CompanyModel } from '../new-company/new-company.model';\r\nimport { CookieService } from '../cookie.service';\r\nimport { MyService } from '../globals';\r\nimport { Registrations } from './registrations.model';\r\nimport { environment } from \"src/environments/environment\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RegistrationsService {\r\n\r\n  public _url: string = environment.api + \"/users/\";\r\n\r\n  constructor(private http: HttpClient, private cookie: CookieService, private myService: MyService) { }\r\n\r\n  \r\n  getAllRegister() {\r\n    const header = {\r\n      'Authorization': 'Bearer ' + this.cookie.get(\"token\")\r\n    }\r\n\r\n    const headerToken = {\r\n      headers: new HttpHeaders(header),\r\n    };\r\n\r\n\r\n    return this.http.get<Registrations[]>(`${this._url}${this.cookie.get('userId')}/jobs`, headerToken);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cookie",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "myService",
                        "type": "MyService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cookie",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "myService",
                        "type": "MyService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "LoggedGuard",
            "id": "injectable-LoggedGuard-b564ab55a2b79b5b145dce213a74e6c7",
            "file": "src/app/login-home/logged.guard.ts",
            "properties": [
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRouteSnapshot[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRouteSnapshot",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "next",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "next",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { HomeLoginService } from './login-home.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoggedGuard implements CanActivate {\r\n\r\n  path: ActivatedRouteSnapshot[];\r\n  route: ActivatedRouteSnapshot;\r\n\r\n\r\n  constructor(private _authService: HomeLoginService, private _router: Router) {\r\n  }\r\n\r\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\r\n    if (this._authService.isLogged) {\r\n        return true;\r\n    }\r\n\r\n    // navigate to login page\r\n    this._router.navigate(['/']);\r\n    alert('Por favor, se autentique para acessar o sistema')\r\n    // you can save redirect url so after authing we can move them back to the page they requested\r\n    return false;\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_authService",
                        "type": "HomeLoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_authService",
                        "type": "HomeLoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "MyProfileResolver",
            "id": "injectable-MyProfileResolver-55f6e1eebc1a2c9762fb142eefd2121d",
            "file": "src/app/my-profile/my-profile.resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HomeLoginService } from './../login-home/login-home.service';\nimport { Injectable } from '@angular/core';\nimport {\n  Router, Resolve,\n  RouterStateSnapshot,\n  ActivatedRouteSnapshot\n} from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { User } from '../login-home/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MyProfileResolver implements Resolve<User> {\n\n  constructor(private homeLogin: HomeLoginService) { }\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<User> {\n    return this.homeLogin.reloadUser();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "homeLogin",
                        "type": "HomeLoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "homeLogin",
                        "type": "HomeLoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "TokenInterceptor",
            "id": "injectable-TokenInterceptor-5ca4c5a1b01bffb2a23f18832a83ab71",
            "file": "src/app/token-interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "handleAccess",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { from, Observable } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpInterceptor } from '@angular/common/http';\r\nimport { HttpRequest } from '@angular/common/http';\r\nimport { HttpHandler } from '@angular/common/http';\r\nimport { HttpEvent } from '@angular/common/http';\r\nimport { HttpHeaders } from '@angular/common/http';\r\nimport { CookieService } from './cookie.service';\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n  constructor(private cookieService: CookieService) {}\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    return from(this.handleAccess(request, next));\r\n  }\r\n\r\n  private async handleAccess(request: HttpRequest<any>, next: HttpHandler):\r\n      Promise<HttpEvent<any>> {\r\n    const token = this.cookieService.get('Authorization');\r\n    let changedRequest = request;\r\n    // HttpHeader object immutable - copy values\r\n    const headerSettings: {[name: string]: string | string[]; } = {};\r\n\r\n    for (const key of request.headers.keys()) {\r\n      headerSettings[key] = request.headers.getAll(key) ?? '';\r\n    }\r\n    if (token && token.length > 0) {\r\n      headerSettings['Authorization'] = 'Bearer ' + token;\r\n    }\r\n    headerSettings['Content-Type'] = 'application/json';\r\n    const newHeader = new HttpHeaders(headerSettings);\r\n\r\n    changedRequest = request.clone({\r\n      headers: newHeader});\r\n    return next.handle(changedRequest).toPromise();\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-31f2097c50937388685afa242f4bd727",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "showSideMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "sideMenuOpened",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "title",
                    "defaultValue": "'projeto-emprego-frontend'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "clickLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clickMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isRecruiter$",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, ActivationEnd, NavigationEnd, Router } from '@angular/router';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { HomeLoginService } from './login-home/login-home.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n  title = 'projeto-emprego-frontend';\r\n  sideMenuOpened = false;\r\n  showSideMenu;\r\n\r\n  constructor(\r\n    private route: Router,\r\n    private loginService: HomeLoginService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.route.events.pipe(\r\n      filter(e => e instanceof ActivationEnd),\r\n      map(e  => (e as any).snapshot.data)).subscribe(params => {\r\n      this.showSideMenu = params['showSideMenu']\r\n      console.log(params)\r\n    })\r\n\r\n  }\r\n\r\n  isRecruiter$() {\r\n    return this.loginService.loggedUser$.pipe(\r\n      map(\r\n        e => e?.roles.find(role => role.name === 'ROLE_RECRUITER')\r\n      )\r\n    )\r\n  }\r\n\r\n  clickLogout() {\r\n    this.loginService.logout();\r\n    this.sideMenuOpened = false;\r\n  }\r\n\r\n\r\n  get menuIcone() {\r\n    return (this.sideMenuOpened && 'menu_open') || 'menu'\r\n  }\r\n\r\n  clickMenu() {\r\n    this.sideMenuOpened = !this.sideMenuOpened\r\n  }\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".space-flex {\r\n    flex: 1 1;\r\n}\r\n\r\n.h100 {\r\n    height: 100%;\r\n}\r\n\r\nmain {\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n[dir=\"rtl\"] {\r\n    -moz-transform: scaleX(-1);\r\n    -o-transform: scaleX(-1);\r\n    -webkit-transform: scaleX(-1);\r\n    transform: scaleX(-1);\r\n    filter: FlipH;\r\n    -ms-filter: \"FlipH\";\r\n}",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loginService",
                        "type": "HomeLoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "HomeLoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "menuIcone": {
                    "name": "menuIcone",
                    "getSignature": {
                        "name": "menuIcone",
                        "type": "",
                        "returnType": "",
                        "line": 45
                    }
                }
            },
            "templateData": "<main>\r\n  <section id=\"toolbar\">\r\n\r\n    <header class=\"bg-indigo-900  text-white p-2\">\r\n        <div class=\"container flex items-center\">\r\n          <span class=\"text-2xl\">Hefest</span>\r\n          <div class=\"space-flex\"></div>\r\n          <button *ngIf='showSideMenu' (click)=\"clickMenu()\" mat-icon-button>\r\n            <mat-icon dir=\"rtl\" >{{ menuIcone }}</mat-icon>\r\n          </button>\r\n        </div>\r\n    </header>\r\n  </section>\r\n\r\n  <section class=\"space-flex\" id=\"main-content\">\r\n    <mat-sidenav-container class=\"h100\">\r\n      <mat-sidenav [opened]=\"sideMenuOpened\" mode=\"side\" position=\"end\">\r\n        <div style=\"width: 200px\" class=\"d-flex flex-column\">\r\n          <div>\r\n            <p style=\"text-align:center; margin-top: 10px;\"><a [routerLink]=\"['home']\" (click)=\"clickMenu()\"> Buscar vagas</a></p>\r\n            <p style=\"text-align:center; margin-top: 10px;\"><a [routerLink]=\"['profile']\" (click)=\"clickMenu()\"> Editar perfil</a></p>\r\n            <p style=\"text-align:center; margin-top: 10px;\"><a [routerLink]=\"['myregister']\" (click)=\"clickMenu()\"> Minhas Inscrições</a></p>\r\n            <ng-container *ngIf=\"isRecruiter$() | async\">\r\n              <p style=\"text-align:center; margin-top: 10px;\"><a [routerLink]=\"['newjob']\" (click)=\"clickMenu()\"> Criar uma Vaga</a></p>\r\n              <p style=\"text-align:center; margin-top: 10px;\"><a [routerLink]=\"['newcompany']\" (click)=\"clickMenu()\"> Cadastre uma empresa</a></p>\r\n            </ng-container>\r\n          </div>\r\n\r\n          <div>\r\n            <p style=\"text-align:center; margin-top: 60px;\"><a href=\"javascript:null\" class=\"text-danger\" (click)=\"clickLogout()\">encerrar sessão</a></p>\r\n          </div>\r\n\r\n      </div>\r\n      </mat-sidenav>\r\n      <mat-sidenav-content>\r\n        <router-outlet></router-outlet>\r\n      </mat-sidenav-content>\r\n    </mat-sidenav-container>\r\n  </section>\r\n</main>\r\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-064a8ddd4520874fdac2c92623296e2c",
            "file": "src/app/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [
                "./dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cards",
                    "defaultValue": "this.breakpointObserver.observe(Breakpoints.Handset).pipe(\r\n    map(({ matches }) => {\r\n      if (matches) {\r\n        return [\r\n          { title: 'Card 1', cols: 1, rows: 1 },\r\n          { title: 'Card 2', cols: 1, rows: 1 },\r\n          { title: 'Card 3', cols: 1, rows: 1 },\r\n          { title: 'Card 4', cols: 1, rows: 1 }\r\n        ];\r\n      }\r\n\r\n      return [\r\n        { title: 'Card 1', cols: 2, rows: 1 },\r\n        { title: 'Card 2', cols: 1, rows: 1 },\r\n        { title: 'Card 3', cols: 1, rows: 2 },\r\n        { title: 'Card 4', cols: 1, rows: 1 }\r\n      ];\r\n    })\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Based on the screen size, switch from standard to one column per row</p>\n",
                    "line": 12,
                    "rawdescription": "\nBased on the screen size, switch from standard to one column per row"
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.scss']\r\n})\r\nexport class DashboardComponent {\r\n  /** Based on the screen size, switch from standard to one column per row */\r\n  cards = this.breakpointObserver.observe(Breakpoints.Handset).pipe(\r\n    map(({ matches }) => {\r\n      if (matches) {\r\n        return [\r\n          { title: 'Card 1', cols: 1, rows: 1 },\r\n          { title: 'Card 2', cols: 1, rows: 1 },\r\n          { title: 'Card 3', cols: 1, rows: 1 },\r\n          { title: 'Card 4', cols: 1, rows: 1 }\r\n        ];\r\n      }\r\n\r\n      return [\r\n        { title: 'Card 1', cols: 2, rows: 1 },\r\n        { title: 'Card 2', cols: 1, rows: 1 },\r\n        { title: 'Card 3', cols: 1, rows: 2 },\r\n        { title: 'Card 4', cols: 1, rows: 1 }\r\n      ];\r\n    })\r\n  );\r\n\r\n  constructor(private breakpointObserver: BreakpointObserver) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".grid-container {\r\n  margin: 20px;\r\n}\r\n\r\n.dashboard-card {\r\n  position: absolute;\r\n  top: 15px;\r\n  left: 15px;\r\n  right: 15px;\r\n  bottom: 15px;\r\n}\r\n\r\n.more-button {\r\n  position: absolute;\r\n  top: 5px;\r\n  right: 10px;\r\n}\r\n\r\n.dashboard-card-content {\r\n  text-align: center;\r\n}\r\n",
                    "styleUrl": "./dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"grid-container\">\r\n  <h1 class=\"mat-h1\">Dashboard</h1>\r\n  <mat-grid-list cols=\"2\" rowHeight=\"350px\">\r\n    <mat-grid-tile *ngFor=\"let card of cards | async\" [colspan]=\"card.cols\" [rowspan]=\"card.rows\">\r\n      <mat-card class=\"dashboard-card\">\r\n        <mat-card-header>\r\n          <mat-card-title>\r\n            {{card.title}}\r\n            <button mat-icon-button class=\"more-button\" [matMenuTriggerFor]=\"menu\" aria-label=\"Toggle menu\">\r\n              <mat-icon>more_vert</mat-icon>\r\n            </button>\r\n            <mat-menu #menu=\"matMenu\" xPosition=\"before\">\r\n              <button mat-menu-item>Expand</button>\r\n              <button mat-menu-item>Remove</button>\r\n            </mat-menu>\r\n          </mat-card-title>\r\n        </mat-card-header>\r\n        <mat-card-content class=\"dashboard-card-content\">\r\n          <div>Card Content Here</div>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </mat-grid-tile>\r\n  </mat-grid-list>\r\n</div>\r\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-06e732eaa92789d3d205b1dfef591022",
            "file": "src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cardSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "JobModel",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "categorySelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "contractedSearchCard",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "filter",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "jobs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "JobModel[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "query",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "salarySelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "searchJobs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "shrinkSearchCard",
                    "args": [
                        {
                            "name": "contracted",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "contracted",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateParams",
                    "args": [
                        {
                            "name": "param",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { HomeLoginService } from '../login-home/login-home.service';\r\nimport { JobModel } from './job-list/job-list.models';\r\nimport { JobListService } from './job-list/job-list.service';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  contractedSearchCard: boolean;\r\n  jobs: JobModel[] = [];\r\n  filter = \"\";\r\n\r\n  categorySelected: any;\r\n  salarySelected: any;\r\n  query: string;\r\n\r\n  cardSelected?: JobModel;\r\n\r\n  constructor(private serviceJob: JobListService) { }\r\n\r\n  shrinkSearchCard(contracted: boolean) {\r\n\r\n    this.contractedSearchCard = contracted;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.searchJobs();\r\n  }\r\n\r\n  updateParams(param) {\r\n    if (param.type === 'category') {\r\n      this.categorySelected = param.data;\r\n    } else if (param.type === 'salary') {\r\n      this.salarySelected = param.data;\r\n    } else  {\r\n      this.query = param.data;\r\n    }\r\n\r\n    this.searchJobs();\r\n  }\r\n\r\n  searchJobs() {\r\n    this.serviceJob.getJobs(this.categorySelected, this.salarySelected, this.query)\r\n      .subscribe((res: any) => {\r\n        console.log(res);\r\n        this.jobs = res['content'] as JobModel[];\r\n        console.log(this.jobs);\r\n      },\r\n        erro => {\r\n          console.log(erro);\r\n        });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "main {\r\n .home-grid {\r\n   display: grid;\r\n   grid-template-columns: 1fr;\r\n   &.showing-descriptor {\r\n     grid-template-columns: 30rem 1fr;\r\n   }\r\n }\r\n}\r\n",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "serviceJob",
                        "type": "JobListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "serviceJob",
                        "type": "JobListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<main>\r\n\r\n    <div class=\"container px-4\">\r\n      <h2 class=\"text-3xl my-4\">Turbine seu portfolio com treinamentos exclusivos HEFEST!</h2>\r\n    </div>\r\n\r\n\r\n    <!-- Jobs -->\r\n    <div class=\"container px-4\">\r\n      <h2 class=\"text-3xl my-4\">Vagas abertas perfeitas para você!</h2>\r\n      <section  class=\"mt-4 mx-auto home-grid\" [class.showing-descriptor]=\"cardSelected\" >\r\n        <app-job-list (selectCard)=\"cardSelected = $event\" [showingPreview]=\"!!cardSelected\" (click)=\"shrinkSearchCard(true)\" [jobs]=\"jobs | filterByJob:filter\">\r\n        </app-job-list>\r\n        <app-job-descriptor [job]=\"cardSelected\" *ngIf=\"cardSelected\">\r\n        </app-job-descriptor>\r\n      </section>\r\n    </div>\r\n\r\n</main>\r\n"
        },
        {
            "name": "JobCardComponent",
            "id": "component-JobCardComponent-f38c12de39415be09a50cbc081eb6630",
            "file": "src/app/home/job-list/job-card/job-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-job-card",
            "styleUrls": [
                "./job-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./job-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "job",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "JobModel"
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "onApply",
                    "defaultValue": "new EventEmitter<JobModel>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\nimport { JobModel } from '../job-list.models';\n\n@Component({\n  selector: 'app-job-card',\n  templateUrl: './job-card.component.html',\n  styleUrls: ['./job-card.component.scss']\n})\nexport class JobCardComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  job: JobModel;\n\n  @Input()\n  selected = false;\n\n  @Output()\n  onApply = new EventEmitter<JobModel>();\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./job-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [class.ring]=\"selected\" class=\"ring-indigo-200 t-card border relative m-2\">\n  <div class=\"\">\n    <div class=\"absolute right-0 -top-4 text-sm transform scale-75\">\n      <mat-chip-list>\n        <div style=\"cursor: pointer;\" mat-chip color=\"primary\" selected>\n          {{ job.knowledges[0].name }}\n        </div>\n        <div style=\"cursor: pointer;\" *ngFor=\"let knowledge of (job.knowledges[1] && (job.knowledges | slice : 1 : 4) || [])\" mat-chip color=\"accent\" selected>\n          {{ knowledge.name }}\n        </div>\n      </mat-chip-list>\n    </div>\n    <div class=\"mx-3 mt-4\">\n      <h5 class=\"text-gray-700 font-light text-lg  pr-3 overflow-ellipsis \">\n        <span class=\"flex items-center\">\n          <img class=\"w-8 h-8 object-cover mr-2 rounded-full\" *ngIf=\"job.companyLogo\" [src]=\"job.companyLogo\">\n          <span [title]=\"job.title\" class=\"overflow-hidden overflow-ellipsis whitespace-nowrap\">{{job.title}}</span>\n        </span>\n      </h5>\n      <p class=\"text-xs mt-2\">\n        {{job.description | ellipsis:150 }}&#10;\n      </p>\n      <p class=\"card-text uppercase mt-3 text-md font-bold\">\n        R${{job.salary}} mensais&#10;\n      </p>\n    </div>\n  <div [class.bg-indigo-100]=\"selected\" class=\"flex mt-2 justify-between bg-gray-100 items-center rounded-b-md\">\n    <div [class.text-indigo-500]=\"selected\" class=\"p-3 flex items-center text-sm text-gray-400\"><mat-icon>place</mat-icon> <span class=\"ml-1\">{{job.city}}</span></div>\n    <button class=\"t-btn t-btn-indigo transform scale-75\" (click)=\"onApply.emit(job)\">candidatar</button>\n  </div>\n  </div>\n</div>\n"
        },
        {
            "name": "JobDescriptorComponent",
            "id": "component-JobDescriptorComponent-bfd7bbde57e27037e936a6d4e821706a",
            "file": "src/app/home/job-descriptor/job-descriptor.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-job-descriptor",
            "styleUrls": [
                "./job-descriptor.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./job-descriptor.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "job",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "JobModel"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "jobDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "JobDetailsModel",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "loadingJobDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reloadJobDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, SimpleChanges } from '@angular/core';\nimport { NEVER, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { JobDetailsModel, JobModel } from '../job-list/job-list.models';\nimport { JobListService } from '../job-list/job-list.service';\n\n@Component({\n  selector: 'app-job-descriptor',\n  templateUrl: './job-descriptor.component.html',\n  styleUrls: ['./job-descriptor.component.scss']\n})\nexport class JobDescriptorComponent implements OnInit {\n\n  constructor(private jobService: JobListService) { }\n\n  @Input()\n  job: JobModel;\n  jobDetails?: JobDetailsModel;\n  loadingJobDetails: boolean;\n\n  ngOnInit(): void {\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.job) {\n      this.reloadJobDetails();\n    }\n  }\n\n  reloadJobDetails() {\n    this.loadingJobDetails = true;\n    this.jobService.getJob(this.job.id).subscribe({\n      next: job => {\n        this.jobDetails = job;\n        this.loadingJobDetails = false;\n      }\n    })\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".max-height {\r\n  max-height: calc(100vh - 5rem);\r\n}\r\n\r\nmarkdown ::ng-deep {\r\n\r\n  a {\r\n    @apply text-indigo-500\r\n  }\r\n  p {\r\n    @apply mb-4;\r\n  }\r\n  h1 {\r\n    @apply text-3xl mb-8;\r\n  }\r\n  h2 {\r\n    @apply text-xl mb-6 font-semibold;\r\n  }\r\n  h3 {\r\n    @apply text-lg mb-4;\r\n  }\r\n  blockquote {\r\n    @apply bg-gray-100 pl-8 border-l-4 rounded border-gray-200 p-2 mb-4;\r\n    p {\r\n      margin: 0;\r\n    }\r\n  }\r\n  ul {\r\n    @apply pl-8 mb-4;\r\n    li {\r\n      @apply list-disc;\r\n    }\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./job-descriptor.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "jobService",
                        "type": "JobListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "jobService",
                        "type": "JobListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"border overflow-y-auto max-height mb-4 shadow-md rounded-md ml-4 p-8\">\n    <header class=\"flex items-center overflow-ellipsis\">\n      <img class=\"w-20 h-20 mr-4 rounded-lg\" *ngIf=\"job.companyLogo as logo\" [src]=\"logo\" [title]=\"jobDetails?.company.name\" [alt]=\"jobDetails?.company.name\">\n      <div class=\"flex justify-center overflow-hidden  flex-col flex-grow-0\">\n        <a href=\"javascript:null\" [title]=\"jobDetails?.company.name\" class=\"t-link-indigo\">{{ jobDetails?.company.name }}</a>\n        <h2 [title]=\"job.title\" class=\"md:text-xl sm:text-lg overflow-hidden overflow-ellipsis whitespace-nowrap pr-2\">{{ job.title }}</h2>\n        <sub class=\"font-light text-lg text-gray-500\">{{ job.city }}</sub>\n      </div>\n      <button class=\"w-30 ml-auto t-btn t-btn-indigo whitespace-nowrap md:text-lg sm:text-md\">candidatar-se</button>\n    </header>\n    <section class=\"mt-4\">\n      <mat-chip-list>\n        <button style=\"cursor: pointer\" mat-chip *ngFor=\"let knowledge of job.knowledges\" selected color=\"primary\">\n          {{ knowledge.name }}\n        </button>\n      </mat-chip-list>\n    </section>\n    <div class=\"block px-8 mt-4 border-t\"></div>\n    <main class=\"mt-4\">\n        <section *ngIf=\"loadingJobDetails\" class=\"t-center h-96\">\n          <mat-spinner diameter=\"50\" color=\"primary\"></mat-spinner>\n        </section>\n        <markdown *ngIf=\"!loadingJobDetails && jobDetails\" [data]=\"jobDetails.fullDescription\">\n\n        </markdown>\n    </main>\n</div>\n"
        },
        {
            "name": "JobListComponent",
            "id": "component-JobListComponent-af67709c1472ca2a160815f19701a009",
            "file": "src/app/home/job-list/job-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-job-list",
            "styleUrls": [
                "./job-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./job-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "jobs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "JobModel[]"
                },
                {
                    "name": "showingPreview",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "selectCard",
                    "defaultValue": "new EventEmitter<JobModel>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "selectedId",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "apply",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCardClick",
                    "args": [
                        {
                            "name": "job",
                            "type": "JobModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "job",
                            "type": "JobModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { JobModel } from './job-list.models';\r\nimport { JobListService } from './job-list.service';\r\n\r\n@Component({\r\n  selector: 'app-job-list',\r\n  templateUrl: './job-list.component.html',\r\n  styleUrls: ['./job-list.component.scss']\r\n})\r\nexport class JobListComponent implements OnInit {\r\n\r\n  @Input() jobs: JobModel[] = [];\r\n  @Input() showingPreview = false;\r\n\r\n  @Output()\r\n  selectCard = new EventEmitter<JobModel>();\r\n\r\n  selectedId = -1;\r\n\r\n  onCardClick(job: JobModel) {\r\n    this.selectCard.emit(job);\r\n    this.selectedId = job.id;\r\n  }\r\n\r\n  constructor(private serviceJob: JobListService) { }\r\n\r\n  ngOnInit() {}\r\n\r\n  apply(event) {\r\n    console.log(event)\r\n    this.serviceJob.apply(event)\r\n        .subscribe((res) => {\r\n         alert('Candidatura efetiva com sucesso, boa sorte!')\r\n        },\r\n        erro => {\r\n          console.log(erro)\r\n        });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n#card-job {\r\n  margin: 1rem;\r\n}\r\n\r\n#notfound{\r\n  color: #a9a9a9;\r\n}\r\n\r\n.showing-preview {\r\n  @apply grid-cols-1;\r\n}\r\n\r\n.not-showing-preview {\r\n  @apply lg:grid-cols-3 md:grid-cols-2 sm:grid-cols-1;\r\n}\r\n\r\n",
                    "styleUrl": "./job-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "serviceJob",
                        "type": "JobListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "serviceJob",
                        "type": "JobListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"p-2\">\r\n  <app-job-search></app-job-search>\r\n</div>\r\n<div [ngClass]=\"{'showing-preview': showingPreview,'not-showing-preview': !showingPreview }\" class=\"grid  mt-2\" *ngIf=\"jobs?.length > 0\">\r\n  <div *ngFor=\"let obj of jobs\">\r\n    <app-job-card (click)=\"onCardClick(obj)\" [selected]=\"selectedId === obj.id\" [job]=\"obj\"></app-job-card>\r\n  </div>\r\n</div>\r\n\r\n  <div *ngIf=\"jobs?.length == 0\" class=\"d-flex justify-content-center\" >\r\n    <div class=\"d-flex justify-content-center\">\r\n      <h4 id =\"notfound\" class=\"text-center mt-5\">Nenhuma vaga foi encontrada <i class=\"material-icons\" style=\"font-size: 40px\">sentiment_very_dissatisfied</i></h4>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "JobSearchComponent",
            "id": "component-JobSearchComponent-7382f3457c09eaac0cbd16c839ab2eb9",
            "file": "src/app/home/job-search/job-search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-job-search",
            "styleUrls": [
                "./job-search.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./job-search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "knowledges",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Knowledge[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "salaries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeSalary",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "showSelect",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { TypeSalary } from 'src/app/new-job/new-job.model';\nimport { Knowledge } from '../job-list/job-list.models';\nimport { JobListService } from '../job-list/job-list.service';\n\n@Component({\n  selector: 'app-job-search',\n  templateUrl: './job-search.component.html',\n  styleUrls: ['./job-search.component.scss']\n})\nexport class JobSearchComponent implements OnInit {\n\n  constructor(private jobService: JobListService) { }\n\n  showSelect = false;\n\n  salaries: TypeSalary;\n  knowledges: Knowledge[] = [];\n\n  ngOnInit(): void {\n    this.jobService.getSalaries().subscribe({\n      next: salaries => {\n        this.salaries = salaries\n      }\n    })\n    this.jobService.getKnowledges().subscribe({\n      next: knowledges => {\n        this.knowledges = knowledges;\n      }\n    })\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./job-search.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "jobService",
                        "type": "JobListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "jobService",
                        "type": "JobListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"flex justify-between max-w-lg\">\n  <label for=\"search\">refine sua pesquisa</label>\n  <a (click)=\"showSelect = !showSelect\" href=\"javascript:null\">mais opções <mat-icon>{{ showSelect ? 'expand_less' : 'expand_more' }}</mat-icon></a>\n</div>\n<div class=\"flex items-stretch max-w-lg\">\n  <input id=\"search\" class=\"border flex-1 rounded-md block p-2\" type=\"text\">\n  <div class=\"ml-2 rounded-md cursor-pointer flex border h-fit-content hover:text-white hover:bg-indigo-600 text-gray-300 px-3 py-2\">\n    <mat-icon>search</mat-icon>\n  </div>\n</div>\n<div class=\"flex flex-wrap\" *ngIf=\"showSelect\">\n\n  <!-- Select de salários -->\n  <div class=\"flex flex-col mr-2 mt-2 text-sm items-start\">\n    <label class=\"mb-0\" for=\"\">salário</label>\n    <select class=\"rounded-md p-1 mt-1 shadow-sm border\">\n      <option *ngFor=\"let keyval of (salaries | keyvalue)\" [value]=\"keyval.key\">{{ keyval.value }}</option>\n    </select>\n  </div>\n  <!-- Select de conhecimentos -->\n  <div class=\"flex flex-col mt-2 text-sm items-start\">\n    <label class=\"mb-0\" for=\"\">habilidade</label>\n    <select class=\"rounded-md p-1 mt-1 shadow-sm border\">\n      <option *ngFor=\"let knowledge of knowledges\" [value]=\"knowledge.id\">{{ knowledge.name }}</option>\n    </select>\n  </div>\n\n</div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-22a210baa36ffdeb59cf8cedf4e97ed1",
            "file": "src/app/login-home/signin/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { HomeLoginService } from '../login-home.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit{\r\n\r\n    loginForm: FormGroup;\r\n\r\n    constructor(private formBuilder: FormBuilder,\r\n                private loginService : HomeLoginService,\r\n                private router : Router) {  }\r\n\r\n    ngOnInit(): void {\r\n        this.loginForm = this.formBuilder.group({\r\n            userName: ['', Validators.required],\r\n            password: ['', Validators.required]\r\n        });\r\n\r\n        console.log(this.loginForm.get('password'));\r\n\r\n    }\r\n\r\n    login() {\r\n\r\n        const email = this.loginForm.get('userName').value;\r\n        const password = this.loginForm.get('password').value;\r\n        this.loginService.authenticate(email, password)\r\n        .subscribe(() => {\r\n            this.router.navigateByUrl('home');\r\n        },\r\n        erro => {\r\n            alert('email/senha errada ;(');\r\n            this.loginForm.reset();\r\n        })\r\n\r\n\r\n    }\r\n\r\n\r\n    register(){\r\n\r\n    }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-form {\r\n    min-width: 150px;\r\n    max-width: 500px;\r\n    width: 100%;\r\n  }\r\n  \r\n.example-full-width {\r\n    width: 100%;\r\n}\r\n.container-login100-form-btn {\r\n    width: 100%;\r\n    display: -webkit-box;\r\n    display: -webkit-flex;\r\n    display: -moz-box;\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n}\r\n\r\n.login100-form-btn {\r\n    font-size: 16px;\r\n    color: #fff;\r\n    line-height: 1.2;\r\n    text-transform: uppercase;\r\n\r\n    display: -webkit-box;\r\n    display: -webkit-flex;\r\n    display: -moz-box;\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 0 20px;\r\n    width: 100%;\r\n    height: 50px;\r\n    background-color: #57b846;\r\n    border-radius: 25px;\r\n    border:0px solid transparent;\r\n\r\n    box-shadow: 0 10px 30px 0px rgba(87, 184, 70, 0.5);\r\n    -moz-box-shadow: 0 10px 30px 0px rgba(87, 184, 70, 0.5);\r\n    -webkit-box-shadow: 0 10px 30px 0px rgba(87, 184, 70, 0.5);\r\n    -o-box-shadow: 0 10px 30px 0px rgba(87, 184, 70, 0.5);\r\n    -ms-box-shadow: 0 10px 30px 0px rgba(87, 184, 70, 0.5);\r\n\r\n    -webkit-transition: all 0.4s;\r\n    -o-transition: all 0.4s;\r\n    -moz-transition: all 0.4s;\r\n    transition: all 0.4s;\r\n}\r\n.login100-form-btn:hover  {\r\n    background-color: #333333;\r\n    box-shadow: 0 10px 30px 0px rgba(51, 51, 51, 0.5);\r\n    -moz-box-shadow: 0 10px 30px 0px rgba(51, 51, 51, 0.5);\r\n    -webkit-box-shadow: 0 10px 30px 0px rgba(51, 51, 51, 0.5);\r\n    -o-box-shadow: 0 10px 30px 0px rgba(51, 51, 51, 0.5);\r\n    -ms-box-shadow: 0 10px 30px 0px rgba(51, 51, 51, 0.5);\r\n}\r\n.login-more {\r\n    margin-top: 10%;\r\n}\r\n\r\n.login-more li {\r\n    position: relative;\r\n    padding-left: 16px;\r\n}\r\n\r\n.login-more li::before {\r\n    content: \"\";\r\n    display: block;\r\n    position: absolute;\r\n    width: 5px;\r\n    height: 5px;\r\n    border-radius: 50%;\r\n    background-color: #cccccc;\r\n    top: 45%;\r\n    -webkit-transform: translateY(-50%);\r\n    -moz-transform: translateY(-50%);\r\n    -ms-transform: translateY(-50%);\r\n    -o-transform: translateY(-50%);\r\n    transform: translateY(-50%);\r\n    left: 0;\r\n}\r\n.txt1 {\r\n    font-size: 15px;\r\n    color: #999999;\r\n    line-height: 1.5;\r\n}\r\n\r\n.txt2 {\r\n    font-size: 15px;\r\n    color: #57b846;\r\n    line-height: 1.5;\r\n}\r\n\r\nul, li {\r\n    margin: 0px;\r\n    list-style-type: none;\r\n}\r\n\r\na:hover {\r\n    text-decoration: none;\r\n    color: #333333;\r\n}\r\n\r\nbutton{\r\n    cursor: pointer;\r\n}",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loginService",
                        "type": "HomeLoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "HomeLoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-6 mb-2\">\r\n            <img class=\"img-fluid d-none d-sm-block mt-4\"\r\n                src=\"https://100noticia.com.br/wp-content/uploads/2019/08/20190819_081114.jpg\" alt=\"Welcome\">\r\n        </div>\r\n\r\n        <div class=\"col-md-6\">\r\n            <h4 class=\"text-center mt-4\">Entrar</h4>\r\n\r\n            <form [formGroup]=\"loginForm\" class=\"form mt-4\" (submit)=\"login()\">\r\n\r\n                <div class=\"form-group\">\r\n                    <input type=\"email\" formControlName=\"userName\" class=\"form-control\" placeholder=\"e-mail\" autofocus>\r\n                \r\n                <small *ngIf=\"loginForm.get('userName').errors?.required\" class=\"text-danger d-block\">\r\n                    e-mail obrigatório!\r\n                </small>\r\n            </div>\r\n\r\n                <div class=\"form-group\">\r\n                    <input formControlName=\"password\" type=\"password\" class=\"form-control\" placeholder=\"senha\">\r\n                \r\n                <small *ngIf=\"loginForm.get('password').errors?.required\" class=\"text-danger d-block\">\r\n                    Senha obrigatória!\r\n                </small>\r\n            </div>\r\n\r\n                <button [disabled]=\"loginForm.invalid\" type=\"submit\" class=\"btn btn-primary btn-block\">\r\n                    entrar\r\n                </button>\r\n\r\n\r\n            </form>  \r\n               \r\n            <div class=\"row mt-1\">\r\n                <div class=\"col \">\r\n                    <input name=\"lem_senha\" type=\"checkbox\" >\r\n                    <a> Continuar conectado </a>\r\n                </div>\r\n                <div class=\"col\">\r\n                    <div class=\"text-right\">\r\n                        <a  class=\"ls-login-forgot text-right\" [routerLink]=\"['resetpassword']\"  >Esqueci minha senha</a>\r\n                    </div>\r\n                    \r\n                </div>\r\n              </div>\r\n                \r\n            \r\n            <p class=\"form mt-3\">Não é um usuário?<a [routerLink]=\"['register']\"  > Cadastre-se</a></p>\r\n        </div>\r\n    </div>\r\n</div> -->\r\n\r\n\r\n<div class=\"w-100 h-100\">\r\n    <div class=\"d-flex justify-content-center\">\r\n        <div>\r\n            <h2 class=\"text-center mt-5\">Bem vindo!</h2>\r\n            <div class=\"d-flex justify-content-center\">\r\n                <i class=\"material-icons\" style=\"font-size: 100px\">work_outline</i>\r\n            </div>\r\n            <h6 class=\"text-center mt-2\">Uma nova jornada inicia aqui!</h6>\r\n\r\n            <div class=\"mt-5\" style=\"min-width: 25vw\">\r\n                <form [formGroup]=\"loginForm\" (submit)=\"login()\">\r\n                    <div class=\"example-form\">\r\n                        <mat-form-field class=\"example-full-width\">\r\n                            <mat-label>Usuário</mat-label>\r\n                            <input matInput #message formControlName=\"userName\" maxlength=\"256\" placeholder=\"e-mail\" />\r\n                        </mat-form-field>\r\n\r\n                        <small *ngIf=\"loginForm.get('userName').errors?.required && loginForm.get('userName').touched\" class=\"text-danger d-block\">\r\n                            e-mail obrigatório!\r\n                        </small>\r\n                    </div>\r\n\r\n                    <div class=\"example-form\">\r\n                        <mat-form-field class=\"example-full-width\">\r\n                            <mat-label>Senha</mat-label>\r\n                            <input matInput #message formControlName=\"password\" maxlength=\"256\" type=\"password\" />\r\n                        </mat-form-field>\r\n\r\n                        <small *ngIf=\"loginForm.get('password').errors?.required && loginForm.get('password').touched\" class=\"text-danger d-block\">\r\n                            Senha obrigatória!\r\n                        </small>\r\n                    </div>\r\n                    \r\n                    <div class=\"container-login100-form-btn mt-3\">\r\n                        <button type=\"submit\" class=\"login100-form-btn\">Login</button>\r\n                    </div>\r\n                </form>\r\n\r\n                <ul class=\"login-more p-t-190\">\r\n                    <li class=\"m-b-8\" routerLink=\"/login/redefinir-senha\">\r\n                        <span class=\"txt1\">\r\n                            Esqueceu\r\n                        </span>\r\n                        <a [routerLink]=\"['resetpassword']\" class=\"txt2\">\r\n                            Usuário / Senha ?\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <span class=\"txt1\">\r\n                            Não tem conta?\r\n                        </span>\r\n                        <a [routerLink]=\"['register']\" class=\"txt2\">\r\n                            Registre-se\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "MyProfileComponent",
            "id": "component-MyProfileComponent-ba5684f3bd2cba09df6a7f2d8fc8344c",
            "file": "src/app/my-profile/my-profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-my-profile",
            "styleUrls": [
                "./my-profile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./my-profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "this.route.snapshot.data.user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "User"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | null",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "isSaving",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "myInfosForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "namePattern",
                    "defaultValue": "/^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð ,.'-]+$/u",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        143
                    ]
                },
                {
                    "name": "phonePattern",
                    "defaultValue": "/^[1-9]{2}(?:[2-8]|9[1-9])[0-9]{3}[0-9]{4}$/",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getLabelNgClass",
                    "args": [
                        {
                            "name": "el",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ focus: boolean; error: any; 't-input-label': boolean; }",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "el",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfilePic",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isInFocus",
                    "args": [
                        {
                            "name": "el",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "el",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveInfos",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Router, ActivatedRoute } from '@angular/router';\nimport { HomeLoginService } from './../login-home/login-home.service';\nimport { FormBuilder, Validators, FormGroup, FormControl, AbstractControl } from '@angular/forms';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { User } from '../login-home/user.model';\n\n@Component({\n  selector: 'app-my-profile',\n  templateUrl: './my-profile.component.html',\n  styleUrls: ['./my-profile.component.scss']\n})\nexport class MyProfileComponent implements OnInit {\n\n\n  constructor(private fb: FormBuilder, private loginService: HomeLoginService, private route: ActivatedRoute) { }\n\n  readonly namePattern = /^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð ,.'-]+$/u;\n  readonly phonePattern = /^[1-9]{2}(?:[2-8]|9[1-9])[0-9]{3}[0-9]{4}$/;\n\n\n  @Input()\n  user: User = this.route.snapshot.data.user;\n\n  myInfosForm: FormGroup\n\n  activeElement: HTMLElement | null;\n\n  isSaving = false;\n\n  isInFocus(el: HTMLElement) {\n    return el === this.activeElement;\n  }\n\n  getProfilePic() {\n    return (this.user.profilePic && this.user.profilePic !== '') ?\n    this.user.profilePic :\n    'https://jsl-online.com/wp-content/uploads/2017/01/placeholder-user.png'\n  }\n\n  getLabelNgClass(el: HTMLElement, control: AbstractControl) {\n    return ({ 'focus': this.isInFocus(el), 'error': control.invalid, 't-input-label': true })\n  }\n\n  get emailControl() {\n    return this.myInfosForm.get('email');\n  }\n\n  get phoneControl() {\n    return this.myInfosForm.get('phone');\n  }\n\n  get nameControl() {\n    return this.myInfosForm.get('name');\n  }\n\n  saveInfos() {\n    this.isSaving = true;\n    this.loginService.reloadUser().subscribe({\n      next: _e => this.isSaving = false\n    })\n  }\n\n  ngOnInit(): void {\n\n    this.myInfosForm = this.fb.group({\n      name: [\n        this!.user.name,\n        [\n          Validators.pattern(this.namePattern),\n          Validators.required,\n        ]],\n      email: [\n        this!.user.email,\n        [\n          Validators.email,\n          Validators.required,\n        ]\n      ],\n      phone: [\n        this!.user.phone,\n        [\n          Validators.pattern(this.phonePattern),\n          Validators.required,\n        ]\n      ]\n    })\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host::ng-deep {\r\n  .mat-progress-spinner circle, .mat-spinner circle {\r\n    @apply text-white stroke-current text-opacity-30;\r\n  }\r\n}\r\n",
                    "styleUrl": "./my-profile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loginService",
                        "type": "HomeLoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "HomeLoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "emailControl": {
                    "name": "emailControl",
                    "getSignature": {
                        "name": "emailControl",
                        "type": "",
                        "returnType": "",
                        "line": 44
                    }
                },
                "phoneControl": {
                    "name": "phoneControl",
                    "getSignature": {
                        "name": "phoneControl",
                        "type": "",
                        "returnType": "",
                        "line": 48
                    }
                },
                "nameControl": {
                    "name": "nameControl",
                    "getSignature": {
                        "name": "nameControl",
                        "type": "",
                        "returnType": "",
                        "line": 52
                    }
                }
            },
            "templateData": "<main class=\"flex flex-col\">\n  <h2 class=\"container mt-12 mb-4 text-3xl\">Minhas informações</h2>\n\n  <article\n    *ngIf=\"!user.emailVerified\"\n    class=\"bg-yellow-400 rounded shadow p-3 container mb-4\"\n  >\n    <p>E-mail não verificado, por favor, consulte seu e-mail para validação</p>\n  </article>\n\n  <article class=\"container lg:px-36 t-card-no-anim py-4\">\n    <h2 class=\"text-2xl md:text-3xl font-light md:text-center  ml-2 md:ml-4\">dados pessoais</h2>\n    <article\n      class=\"p-2 md:p-4 grid md:grid-cols-2 sm:grid-cols-1 sm:items-center md:items-start\"\n    >\n      <div class=\"flex items-center flex-col\">\n        <h3 class=\"mt-4 self-start md:self-center text-lg  mb-2\">Foto de perfil</h3>\n        <div\n          id=\"profilePic\"\n          class=\"\n          mr-0\n          w-48 h-48\n          relative\n          rounded-full\n          cursor-pointer\n          shadow\n          self-center\n          bg-cover\n          bg-center\n          transition-all\n          hover:shadow-lg\n          active:bg-opacity\n          md:mr-4\n          md:w-64 md:h-64\n          \"\n          [ngStyle]=\"{ 'background-image': 'url(' +  getProfilePic() + ')' }\"\n        >\n          <div\n            class=\"text-4xl group active:bg-opacity-40 hover:bg-opacity-25 bg-opacity-0 top-0 bottom-0 right-0 left-0 transition-colors absolute t-center rounded-full bg-black\"\n          >\n            <mat-icon\n              [inline]=\"true\"\n              class=\"select-none text-white group-hover:opacity-100 opacity-0 transition-opacity\"\n              >edit</mat-icon\n            >\n          </div>\n        </div>\n      </div>\n      <form [formGroup]=\"myInfosForm\" class=\"flex self-center flex-col\">\n        <label [ngClass]=\"getLabelNgClass(nomeInput, nameControl)\" for=\"nome completo\"\n          >nome completo</label\n        >\n        <div class=\"relative\">\n          <input\n            #nomeInput\n            formControlName=\"name\"\n            (focus)=\"activeElement = nomeInput\"\n            (blur)=\"activeElement = null\"\n            id=\"nome completo\"\n            type=\"text\"\n            class=\"t-input\"\n          />\n          <span class=\"t-input-error {{ nameControl.invalid && 'appear' }}\"\n            >nome inválido</span\n          >\n        </div>\n        <label [ngClass]=\"getLabelNgClass(phoneInput, phoneControl)\"  for=\"telefone\">telefone</label>\n        <div class=\"relative\">\n          <input\n            #phoneInput\n            (focus)=\"activeElement = phoneInput\"\n            (blur)=\"activeElement = null\"\n            formControlName=\"phone\"\n            mask=\"(00) 0000-0000||(00) 00000-0000\"\n            id=\"telefone\"\n            type=\"tel\"\n            class=\"t-input\"\n          />\n          <span class=\"t-input-error {{ phoneControl.invalid && 'appear' }}\"\n            >telefone inválido</span\n          >\n        </div>\n        <label [ngClass]=\"getLabelNgClass(emailInput, emailControl)\" for=\"email\">e-mail</label>\n        <div class=\"relative\">\n          <input\n            (focus)=\"activeElement = emailInput\"\n            (blur)=\"activeElement = null\"\n            #emailInput\n            formControlName=\"email\"\n            id=\"email\"\n            type=\"text\"\n            class=\"t-input invalid\"\n          />\n          <span class=\"t-input-error {{ emailControl.invalid && 'appear' }}\"\n            >E-mail inválido</span\n          >\n        </div>\n      </form>\n    </article>\n  </article>\n  <footer class=\"container flex\">\n    <button\n      (click)=\"saveInfos()\"\n      [disabled]=\"!myInfosForm.valid\"\n      class=\"t-center disabled:cursor-not-allowed disabled:opacity-50 t-btn text-xl mr-4 my-4 ml-auto text-white bg-indigo-600\"\n      class=\"{{ isSaving ? 'pointer-events-none cursor-wait opacity-50' : '' }}\"\n    >\n      <span class=\"mr-2\">salvar</span> <mat-spinner *ngIf=\"isSaving\" diameter=\"25\"></mat-spinner>\n    </button>\n    {{ myInfosForm.errors }}\n  </footer>\n</main>\n"
        },
        {
            "name": "NewCompanyComponent",
            "id": "component-NewCompanyComponent-0a8268670d0638505270552bde12a2d1",
            "file": "src/app/new-company/new-company.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-new-company",
            "styleUrls": [
                "./new-company.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./new-company.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "companyForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "listCompanies",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CompanyModel[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "Object",
                    "defaultValue": "Object",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "configForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createCompany",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCompanies",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { CompanyModel } from './new-company.model';\r\nimport { NewCompanyService } from './new-company.service';\r\n\r\n@Component({\r\n  selector: 'app-new-company',\r\n  templateUrl: './new-company.component.html',\r\n  styleUrls: ['./new-company.component.scss']\r\n})\r\nexport class NewCompanyComponent implements OnInit {\r\n\r\n  Object = Object;\r\n  companyForm: FormGroup;\r\n  listCompanies :CompanyModel[] =[] ;\r\n\r\n  constructor(private formBuilder: FormBuilder,\r\n    private router : Router, private newCompanyService: NewCompanyService) {  }\r\n\r\n  ngOnInit() { \r\n    this.configForm()\r\n    this.getCompanies()\r\n    \r\n    }\r\n\r\n  createCompany(){\r\n    const newCompany = this.companyForm.getRawValue() as CompanyModel;\r\n    console.log(newCompany)\r\n        this.newCompanyService.createCompany(newCompany)\r\n        .subscribe((res) => {\r\n          alert(\"companhia criada\")\r\n          this.getCompanies()  \r\n        },\r\n        erro => {\r\n            alert('Compania inválida, revise os campos cadastrados novamente');\r\n        })\r\n  }\r\n\r\n  getCompanies() {\r\n    this.newCompanyService.getAllCompanies()\r\n        .subscribe((res) => {\r\n          this.listCompanies = res['content'] as CompanyModel[]\r\n          console.log(this.listCompanies)\r\n          \r\n        },\r\n        erro => {\r\n            console.log(erro);\r\n        })\r\n  }\r\n\r\n  configForm() {\r\n    this.companyForm = this.formBuilder.group({\r\n      cnpj: ['',\r\n          [\r\n              Validators.required,\r\n              Validators.minLength(14),\r\n          ]\r\n      ],\r\n      name: ['',\r\n          [\r\n              Validators.required\r\n          ]\r\n      ],\r\n      street: ['',\r\n          [\r\n              Validators.required\r\n          ]\r\n      ],\r\n      number: ['',\r\n          [\r\n              Validators.required\r\n          ]\r\n      ],\r\n      complement: ['',\r\n      ],\r\n      cep: ['',\r\n          [\r\n              Validators.required\r\n          ]\r\n      ],\r\n      city: ['',\r\n          [\r\n              Validators.required\r\n          ]\r\n      ],\r\n      state: ['',\r\n          [\r\n              Validators.required\r\n          ]\r\n      ]\r\n  });\r\n\r\n  }\r\n  \r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#btnSend {\r\n  background-color:  #1d3354;\r\nborder: none;\r\ncolor: white;\r\npadding: 16px 32px;\r\ntext-decoration: none;\r\nmargin: 4px 2px;\r\ncursor: pointer;\r\nborder-radius: 5px;\r\n\r\n}\r\n\r\n#titlenewJob{\r\nmargin-top: 1rem;\r\ntext-align: center;\r\ncolor: #1d3354;\r\n}\r\n\r\n.material-icons{\r\n\tmargin-top: 1rem;\r\n\ttext-align: center;\r\n\tcolor: #1d3354;\r\n}\r\n\r\n.container {\r\nposition: relative;\r\nborder: 5px solid  rgb(244, 245, 244);\r\nbackground-color:  rgb(244, 245, 244);\r\nborder-radius: 5px;\r\nmargin-bottom: 1.5rem;\r\n}\r\n\r\n\r\n.btnsendcenter {\r\ntext-align: center;\r\n}\r\n\r\n.btnSend {\r\nposition: absolute;\r\ntop: 50%;\r\n}\r\n\r\n.button {\r\n\tbackground-color:#1d3354;\r\n\tborder-radius:28px;\r\n\tborder:1px solid #1d3354;\r\n\tdisplay:inline-block;\r\n\tcursor:pointer;\r\n\tcolor:#ffffff;\r\n\tfont-family:Arial;\r\n\tfont-size:17px;\r\n\tpadding:16px 31px;\r\n\ttext-decoration:none;\r\n\ttext-shadow:0px 1px 0px #1d3354;\r\n}\r\n.button {\r\n\tbackground-color:#1d3354;\t\r\n\tcursor: pointer;\r\n\t&:disabled {\r\n\t\tcursor: not-allowed;\r\n\t\tpointer-events: none;\r\n\t\tfilter: grayscale(100%);\r\n\t}\r\n\t  \r\n}\r\n\r\n\r\n.button:active {\r\n\tposition:relative;\r\n\ttop:1px;\r\n}\r\n\r\nlabel{\r\ncolor: #1d3354;\r\nfont-size: 18px;\r\n}\r\n\r\ninput[type=number]::-webkit-outer-spin-button,\r\ninput[type=number]::-webkit-inner-spin-button {\r\n    -webkit-appearance: none;\r\n    margin: 0;\r\n}\r\n\r\ninput[type=number] {\r\n    -moz-appearance:textfield;\r\n}\r\n\r\n.example-form {\r\n    min-width: 150px;\r\n    max-width: 500px;\r\n    width: 100%;\r\n  }\r\n  \r\n  .example-full-width {\r\n    width: 100%;\r\n  }",
                    "styleUrl": "./new-company.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "newCompanyService",
                        "type": "NewCompanyService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "newCompanyService",
                        "type": "NewCompanyService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "  \r\n  \r\n  <h1 id=\"titlenewJob\">Cadastre uma nova empresa</h1>\r\n\r\n\r\n  <div class=\"container\">\r\n    <form [formGroup]=\"companyForm\" (submit)=\"createCompany()\"> \r\n            \r\n      <mat-form-field class=\"example-full-width\">\r\n        <mat-label>Nome da Empresa</mat-label>\r\n        <input matInput #message formControlName=\"name\" maxlength=\"256\" placeholder=\"Empresa ABC S/A\" />\r\n    </mat-form-field>\r\n\r\n      <div class=\"d-flex justify-content-between\">\r\n        <mat-form-field class=\"example-full-width\">\r\n          <mat-label>Rua</mat-label>\r\n          <input matInput #message formControlName=\"street\" maxlength=\"256\" placeholder=\"Rua ABC\" />\r\n      </mat-form-field>\r\n\r\n      <mat-form-field class=\"example-full-width\">\r\n        <mat-label>Número</mat-label>\r\n        <input matInput #message formControlName=\"number\" maxlength=\"256\" placeholder=\"123\" />\r\n    </mat-form-field>\r\n\r\n    <mat-form-field class=\"example-full-width\"> \r\n      <mat-label>Complemento</mat-label>\r\n      <input matInput #message formControlName=\"complement\" maxlength=\"256\" placeholder=\"Prédio XYZ, 1º Andar\" />\r\n  </mat-form-field>\r\n\r\n  <mat-form-field class=\"example-full-width\">\r\n    <mat-label>CEP</mat-label>\r\n    <input matInput #message formControlName=\"cep\" maxlength=\"9\" placeholder=\"123456-78\" mask=\"00000-000\"/>\r\n</mat-form-field>\r\n\r\n\r\n    </div>\r\n\r\n    <mat-form-field class=\"example-full-width\">\r\n      <mat-label>Cidade</mat-label>\r\n      <input matInput #message formControlName=\"city\" maxlength=\"256\" placeholder=\"Osasco\" />\r\n  </mat-form-field>\r\n\r\n  <mat-form-field class=\"example-full-width\">\r\n    <mat-label>Estado</mat-label>\r\n    <input matInput #message formControlName=\"state\" maxlength=\"256\" placeholder=\"São Paulo\" />\r\n</mat-form-field>\r\n\r\n<mat-form-field class=\"example-full-width\">\r\n  <mat-label>CNPJ</mat-label>\r\n  <input matInput #message formControlName=\"cnpj\" maxlength=\"18\" placeholder=\"00.000.000/0000-00\" mask=\"00.000.000/0000-00\"/>\r\n</mat-form-field>\r\n     \r\n\r\n\r\n      <div class=\"btnsendcenter\">\r\n        <button class=\"button\" [disabled]=\"companyForm.invalid\" >Cadastrar Empresa</button>\r\n      </div>\r\n\r\n  </form>   \r\n\r\n</div>\r\n\r\n<div class=\"container\">\r\n  \r\n  <h5>Empresas cadastradas: </h5>\r\n  <div *ngIf=\"listCompanies?.length > 0\">\r\n    <div *ngFor='let obj of listCompanies'>\r\n      <p> {{obj.name}} - {{obj.city}}</p>\r\n    </div>\r\n  </div>\r\n    <div *ngIf=\"listCompanies?.length == 0\">\r\n      <p> Parece que você não tem nenhuma empresa cadastrada no momento  ;(</p>\r\n    </div>\r\n  \r\n</div>\r\n  \r\n"
        },
        {
            "name": "NewJobComponent",
            "id": "component-NewJobComponent-6514cac15115ff19ae9107bfba607a9b",
            "file": "src/app/new-job/new-job.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-new-job",
            "styleUrls": [
                "./new-job.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./new-job.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "areas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "jobForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "listCompanies",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CompanyModel[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "Object",
                    "defaultValue": "Object",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "salary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "callAreas",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "callCompanies",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "configForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createJob",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "routerTo",
                    "args": [
                        {
                            "name": "route",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { CompanyModel } from '../new-company/new-company.model';\r\nimport { NewJob, TypeJob, TypeSalary } from './new-job.model';\r\nimport { NewJobService } from './new-job.service';\r\n\r\n@Component({\r\n  selector: 'app-new-job',\r\n  templateUrl: './new-job.component.html',\r\n  styleUrls: ['./new-job.component.scss']\r\n})\r\nexport class NewJobComponent implements OnInit { \r\n\r\n  Object = Object;\r\n  areas;\r\n  salary;\r\n  jobForm: FormGroup;\r\n  listCompanies : CompanyModel[] = []\r\n\r\n  constructor(private formBuilder: FormBuilder,\r\n    private router : Router, private newJobService: NewJobService) {  }\r\n\r\n  ngOnInit() {\r\n    this.configForm()\r\n    this.callAreas()\r\n    this.callCompanies()    \r\n  }\r\n\r\n  callAreas() {\r\n    this.newJobService.getAreas()\r\n        .subscribe((res : TypeJob) => {\r\n         this.areas = res\r\n         console.log(this.areas)\r\n        },\r\n        erro => {\r\n          console.log(erro)\r\n        });\r\n  }\r\n\r\n  callCompanies() {\r\n    this.newJobService.getAllCompanies()\r\n        .subscribe((res : CompanyModel[]) => {\r\n          console.log(res)\r\n         this.listCompanies = res['content'] as CompanyModel[]\r\n        },\r\n        erro => {\r\n          console.log(erro)\r\n        });\r\n  }\r\n\r\n  createJob(){\r\n    const newJob = this.jobForm.getRawValue() as NewJob;\r\n        this.newJobService.createJob(newJob)\r\n        .subscribe(() => {\r\n          alert('Vaga Criada')\r\n          this.routerTo('home')\r\n        },\r\n        erro => {\r\n          alert('Vaga inválida')\r\n        })\r\n  }\r\n\r\n  routerTo(route : String) {\r\n    this.router.navigateByUrl(route.toString());\r\n  }\r\n\r\n  configForm() {\r\n    this.jobForm = this.formBuilder.group({\r\n      title: ['',\r\n          [\r\n              Validators.required,\r\n              Validators.minLength(2)\r\n          ]\r\n      ],\r\n      description: ['',\r\n          [\r\n              Validators.required\r\n          ]\r\n      ],\r\n      salary: ['',\r\n          [\r\n              Validators.required\r\n          ]\r\n      ],\r\n      occupation: ['',\r\n          [\r\n              Validators.required\r\n          ]\r\n      ],\r\n      companyId: ['',\r\n          [\r\n              Validators.required\r\n          ]\r\n      ]\r\n  });\r\n\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#btnSend {\r\n  background-color:  #1d3354;\r\nborder: none;\r\ncolor: white;\r\npadding: 16px 32px;\r\ntext-decoration: none;\r\nmargin: 4px 2px;\r\ncursor: pointer;\r\nborder-radius: 5px;\r\n\r\n}\r\n\r\n#titlenewJob{\r\nmargin-top: 1rem;\r\ntext-align: center;\r\ncolor: #1d3354;\r\n}\r\n\r\n.material-icons{\r\n\tmargin-top: 1rem;\r\n\ttext-align: center;\r\n\tcolor: #1d3354;\r\n}\r\n\r\n.container {\r\nposition: relative;\r\nborder: 5px solid  rgb(244, 245, 244);\r\nbackground-color:  rgb(244, 245, 244);\r\nborder-radius: 5px;\r\nmargin-bottom: 1.5rem;\r\n}\r\n\r\n\r\n.btnsendcenter {\r\ntext-align: center;\r\n}\r\n\r\n.btnSend {\r\nposition: absolute;\r\ntop: 50%;\r\n}\r\n\r\n.button {\r\n\tbackground-color:#1d3354;\r\n\tborder-radius:28px;\r\n\tborder:1px solid #1d3354;\r\n\tdisplay:inline-block;\r\n\tcursor:pointer;\r\n\tcolor:#ffffff;\r\n\tfont-family:Arial;\r\n\tfont-size:17px;\r\n\tpadding:16px 31px;\r\n\ttext-decoration:none;\r\n\ttext-shadow:0px 1px 0px #1d3354;\r\n}\r\n.button {\r\n\tbackground-color:#1d3354;\r\n\t&:disabled {\r\n\t\tcursor: not-allowed;\r\n\t\tpointer-events: none;\r\n\t\tfilter: grayscale(100%);\r\n\t}\r\n}\r\n.button:active {\r\n\tposition:relative;\r\n\ttop:1px;\r\n}\r\n\r\nlabel{\r\ncolor: #1d3354;\r\nfont-size: 18px;\r\n}\r\n\r\ninput[type=number]::-webkit-outer-spin-button,\r\ninput[type=number]::-webkit-inner-spin-button {\r\n    -webkit-appearance: none;\r\n    margin: 0;\r\n}\r\n\r\ninput[type=number] {\r\n    -moz-appearance:textfield;\r\n}\r\n\r\nselect:required:invalid {\r\n\tcolor: gray;\r\n  }\r\n  option[value=\"\"][disabled] {\r\n\tdisplay: none;\r\n  }",
                    "styleUrl": "./new-job.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "newJobService",
                        "type": "NewJobService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "newJobService",
                        "type": "NewJobService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n\r\n  <h1 id=\"titlenewJob\">Criar uma nova vaga</h1>\r\n\r\n\r\n  <div class=\"container\">\r\n    <form [formGroup]=\"jobForm\" (submit)=\"createJob()\">\r\n      <div class=\"form-group\">\r\n        <label id =\"label\" for=\"exampleFormControlInput1\">Título da vaga</label>\r\n\r\n        <input type=\"text\" formControlName=\"title\" class=\"form-control\" id=\"titulo\" placeholder=\"Motorista de Kombi\">\r\n      </div>\r\n\r\n\r\n      <div *ngIf=\"listCompanies?.length == 0\" class=\"form-group\">\r\n        <label id =\"label\" for=\"exampleFormControlInput1\">Empresa</label>\r\n        <select class=\"form-control\" id=\"typejob\" formControlName=\"companyId\" [disabled]=\"true\">\r\n          <option value=\"\" disabled selected>Você precisa cadastrar uma empresa.</option>\r\n        </select>\r\n      </div>\r\n\r\n      <div *ngIf=\"listCompanies?.length > 0\" class=\"form-group\">\r\n        <label id =\"label\" for=\"exampleFormControlInput1\">Empresa</label>\r\n        <select class=\"form-control\" id=\"typejob\" formControlName=\"companyId\">\r\n          <option value=\"\" disabled selected>Selecione a empresa</option>\r\n          <option *ngFor='let obj of listCompanies' [value]=\"obj.id\" >{{obj.name}} </option>\r\n        </select>\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label id =\"labelDescription\"  for=\"exampleFormControlSelect1\">Área da vaga</label>\r\n        <select class=\"form-control\" id=\"typejob\" formControlName=\"occupation\">\r\n          <option value=\"\" disabled selected>Selecione o setor da sua vaga</option>\r\n          <option *ngFor='let key of Object?.keys(areas)' >{{areas[key]}}</option>\r\n        </select>\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label id =\"label\" for=\"exampleFormControlInput1\">Salário mensal</label>\r\n\r\n        <input currencyMask class=\"form-control\" formControlName=\"salary\"  placeholder=\"R$ 980,00\" >\r\n      </div>\r\n<!--\r\n      <div class=\"form-group\">\r\n        <label id =\"labelDescription\"  for=\"exampleFormControlSelect1\">Salário mensal</label>\r\n        <select class=\"form-control\" id=\"salaryJob\" formControlName=\"salary\">\r\n          <option *ngFor='let key of Object?.keys(salary)' >{{salary[key]}}</option>\r\n        </select>\r\n      </div>\r\n  -->\r\n      <div class=\"form-group\">\r\n        <label id =\"labelDescription\"  for=\"exampleFormControlTextarea1\">Descrição da vaga</label>\r\n        <textarea formControlName=\"description\" class=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"10\"\r\n        placeholder=\"Vaga de Motorista &#10;\r\n        Experiência:\r\n          • Experiência como motorista (mesmo que aplicativo);&#10;\r\n          Requisitos:\r\n          • CNH Categoria B (EAR obrigatória)&#10;\r\n          Benefícios: VT, VR, Plano de Saúde e Dental.\" maxlength=\"500\" minlength=\"80\" ></textarea>\r\n      </div>\r\n      <div class=\"btnsendcenter\">\r\n        <button class=\"button\" >Enviar vaga</button>\r\n      </div>\r\n  </form>\r\n\r\n  </div>\r\n\r\n"
        },
        {
            "name": "NewPasswordComponent",
            "id": "component-NewPasswordComponent-542feb344596993e66c42ace30fa3a38",
            "file": "src/app/login-home/new-senha/new-password.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./new-password.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "flag",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "novaSenhaForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "changePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { HomeLoginService } from '../login-home.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\n@Component({\r\n    templateUrl :'./new-password.component.html'\r\n})\r\nexport class NewPasswordComponent implements OnInit{\r\n    \r\n    novaSenhaForm: FormGroup;\r\n\r\n    flag: boolean = true;\r\n\r\n    constructor(private formBuilder: FormBuilder,\r\n                private loginService : HomeLoginService,\r\n                private activateRoute : ActivatedRoute,) {  }\r\n\r\n    ngOnInit(): void {\r\n        this.novaSenhaForm = this.formBuilder.group({\r\n            senha:['', Validators.required],\r\n            senhaConfirma:['', Validators.required]\r\n        });\r\n\r\n    }\r\n\r\n    changePassword() {\r\n        const senha = this.novaSenhaForm.get('senha').value;\r\n        const senhaConfirma = this.novaSenhaForm.get('senhaConfirma').value;\r\n\r\n        this.activateRoute.queryParams.subscribe((res) => {\r\n            const newToken = res.token;\r\n            this.loginService.novaSenha(newToken,senha, senhaConfirma)\r\n        .subscribe((res) => {\r\n            alert(res);\r\n            this.flag =false;\r\n        },\r\n        erro => {\r\n            alert(erro);\r\n            \r\n        })\r\n        },\r\n        erro => {\r\n            alert(erro);\r\n            \r\n        })\r\n    \r\n        \r\n        \r\n    }\r\n    \r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loginService",
                        "type": "HomeLoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activateRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "HomeLoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activateRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n    <div class=\"row\">\r\n       \r\n    \r\n    <div *ngIf = \"flag; else UserRegister\" class=\"col align-self-center\">\r\n            <h4 class=\"text-center mt-4\">Nova senha</h4>\r\n\r\n            <form [formGroup]=\"novaSenhaForm\" class=\"form mt-4\" (submit)=\"changePassword()\">\r\n\r\n                <div class=\"form-group\">\r\n                    <input formControlName=\"senha\" class=\"form-control\" placeholder=\"nova senha\" type=\"password\" autofocus>\r\n             \r\n            </div>\r\n            <div class=\"form-group\">\r\n                <input formControlName=\"senhaConfirma\" class=\"form-control\" placeholder=\"confirmar nova senha\" type=\"password\" autofocus>\r\n         \r\n            </div>\r\n\r\n                <button [disabled]=\"novaSenhaForm.invalid\" type=\"submit\" class=\"btn btn-primary btn-block\">\r\n                   Mudar senha\r\n                </button>\r\n\r\n                 \r\n            </form>  \r\n                \r\n        </div>\r\n        \r\n        <ng-template #UserRegister>\r\n            <div class=\"col align-self-center\">\r\n            <h4 class=\"text-center mt-4\">Senha alterada com sucesso</h4>\r\n\r\n            <div class=\"col text-center\">\r\n                <button [routerLink]=\"['']\" type=\"submit\" class=\"btn btn-primary btn-lg\">\r\n                   Logar!\r\n                </button>\r\n            </div>\r\n             \r\n            </div>\r\n            </ng-template>\r\n    \r\n    </div>\r\n</div>"
        },
        {
            "name": "RegistrationsComponent",
            "id": "component-RegistrationsComponent-5b821d51a2c78c9093f62542aa2ec001",
            "file": "src/app/registrations/registrations.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-registration",
            "styleUrls": [
                "./registrations.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./registrations.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "listRegistrations",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Registrations[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "Object",
                    "defaultValue": "Object",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "getApplyJobs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Registrations } from './registrations.model';\r\nimport { RegistrationsService } from './registrations.service';\r\n\r\n@Component({\r\n  selector: 'app-registration',\r\n  templateUrl: './registrations.component.html',\r\n  styleUrls: ['./registrations.component.scss']\r\n})\r\nexport class RegistrationsComponent implements OnInit { \r\n\r\n  Object = Object;\r\n  listRegistrations : Registrations[] = []\r\n\r\n  constructor(private registrationsService: RegistrationsService) {  }\r\n\r\n  ngOnInit() { \r\n    this.getApplyJobs()  \r\n  }\r\n\r\n  getApplyJobs() {\r\n    this.registrationsService.getAllRegister()\r\n        .subscribe((res) => {\r\n          this.listRegistrations = res\r\n          console.log(this.listRegistrations)          \r\n        },\r\n        erro => {\r\n            console.log(erro);\r\n        })\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#btnSend {\r\n  background-color:  #1d3354;\r\nborder: none;\r\ncolor: white;\r\npadding: 16px 32px;\r\ntext-decoration: none;\r\nmargin: 4px 2px;\r\ncursor: pointer;\r\nborder-radius: 5px;\r\n\r\n}\r\n\r\n#titleRegistration{\r\nmargin-top: 1rem;\r\ntext-align: center;\r\ncolor: #1d3354;\r\nmargin-bottom: 4rem;\r\n}\r\n\r\n.material-icons{\r\n\tmargin-top: 1rem;\r\n\ttext-align: center;\r\n\tcolor: #1d3354;\r\n}\r\n\r\n.container {\r\nposition: relative;\r\nborder: 5px solid  rgb(244, 245, 244);\r\nbackground-color:  rgb(244, 245, 244);\r\nborder-radius: 5px;\r\nmargin-bottom: 1.5rem;\r\n}\r\n\r\n\r\n.btnsendcenter {\r\ntext-align: center;\r\n}\r\n\r\n.btnSend {\r\nposition: absolute;\r\ntop: 50%;\r\n}\r\n\r\n.button {\r\n\tbackground-color:#1d3354;\r\n\tborder-radius:28px;\r\n\tborder:1px solid #1d3354;\r\n\tdisplay:inline-block;\r\n\tcursor:pointer;\r\n\tcolor:#ffffff;\r\n\tfont-family:Arial;\r\n\tfont-size:17px;\r\n\tpadding:16px 31px;\r\n\ttext-decoration:none;\r\n\ttext-shadow:0px 1px 0px #1d3354;\r\n}\r\n.button {\r\n\tbackground-color:#1d3354;\r\n}\r\n.button:active {\r\n\tposition:relative;\r\n\ttop:1px;\r\n}\r\n\r\nlabel{\r\ncolor: #1d3354;\r\nfont-size: 18px;\r\n}\r\n\r\ninput[type=number]::-webkit-outer-spin-button,\r\ninput[type=number]::-webkit-inner-spin-button {\r\n    -webkit-appearance: none;\r\n    margin: 0;\r\n}\r\n\r\ninput[type=number] {\r\n    -moz-appearance:textfield;\r\n}\r\n\r\nselect:required:invalid {\r\n\tcolor: gray;\r\n  }\r\n  option[value=\"\"][disabled] {\r\n\tdisplay: none;\r\n  }",
                    "styleUrl": "./registrations.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "registrationsService",
                        "type": "RegistrationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "registrationsService",
                        "type": "RegistrationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "  \r\n  \r\n  <h1 id=\"titleRegistration\">Acompanhe suas candidaturas</h1>\r\n\r\n <div class=\"container\">\r\n  \r\n    <h5>Minhas Inscrições: </h5>\r\n    <div *ngIf=\"listRegistrations?.length > 0\">\r\n      <div *ngFor='let obj of listRegistrations'>\r\n        <p> <b>Vaga:</b> {{obj.title}}, <b>Local:</b> {{obj.city}} - <b>Remuneração:</b> R${{obj.salary}}</p>\r\n      </div>\r\n    </div>\r\n      <div *ngIf=\"listRegistrations?.length == 0\">\r\n        <p> Parece que você ainda não se candidatou em nenhuma vaga ;/ - \r\n\r\n          <a [routerLink]=\"['../home']\" class=\"txt2\">\r\n            Buscar vagas disponíveis\r\n          </a>\r\n        </p>\r\n      </div>\r\n      \r\n    \r\n  </div>\r\n\r\n  <div class=\"container center\">\r\n\r\n      <a [routerLink]=\"['../home']\" class=\"txt2\">\r\n        Buscar mais vagas\r\n      </a>\r\n    \r\n      \r\n    \r\n  </div>\r\n  \r\n\r\n  \r\n"
        },
        {
            "name": "ResetPasswordComponent",
            "id": "component-ResetPasswordComponent-6ba3856dbeeb46b66ef0b3fa596a4c89",
            "file": "src/app/login-home/reset-password/reset-password.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./reset-password.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reset-password.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { HomeLoginService } from '../login-home.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n    templateUrl: './reset-password.component.html',\r\n    styleUrls: ['./reset-password.component.scss']\r\n})\r\nexport class ResetPasswordComponent implements OnInit {\r\n\r\n    loginForm: FormGroup;\r\n\r\n    constructor(private formBuilder: FormBuilder,\r\n                private loginService: HomeLoginService,\r\n                private router: Router) {  }\r\n\r\n    ngOnInit(): void {\r\n        this.loginForm = this.formBuilder.group({\r\n            email: [null, Validators.required]\r\n        });\r\n\r\n    }\r\n\r\n    sendEmail() {\r\n        const email = this.loginForm.get('email').value;\r\n\r\n        this.loginService.sendEmail(email)\r\n        .subscribe((res) => {\r\n            alert(res);\r\n        },\r\n        erro => {\r\n            alert(erro);\r\n            this.loginForm.reset();\r\n        });\r\n\r\n    }\r\n\r\n    login() {\r\n\r\n    }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-form {\r\n    min-width: 150px;\r\n    max-width: 500px;\r\n    width: 100%;\r\n}\r\n\r\n.example-full-width {\r\n    width: 100%;\r\n}\r\n.container-login100-form-btn {\r\n    width: 100%;\r\n    display: -webkit-box;\r\n    display: -webkit-flex;\r\n    display: -moz-box;\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n}\r\n\r\n.login100-form-btn {\r\n    font-size: 16px;\r\n    color: #fff;\r\n    line-height: 1.2;\r\n    text-transform: uppercase;\r\n\r\n    display: -webkit-box;\r\n    display: -webkit-flex;\r\n    display: -moz-box;\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 0 20px;\r\n    width: 100%;\r\n    height: 50px;\r\n    background-color: #57b846;\r\n    border-radius: 25px;\r\n    border:0px solid transparent;\r\n\r\n    box-shadow: 0 10px 30px 0px rgba(87, 184, 70, 0.5);\r\n    -moz-box-shadow: 0 10px 30px 0px rgba(87, 184, 70, 0.5);\r\n    -webkit-box-shadow: 0 10px 30px 0px rgba(87, 184, 70, 0.5);\r\n    -o-box-shadow: 0 10px 30px 0px rgba(87, 184, 70, 0.5);\r\n    -ms-box-shadow: 0 10px 30px 0px rgba(87, 184, 70, 0.5);\r\n\r\n    -webkit-transition: all 0.4s;\r\n    -o-transition: all 0.4s;\r\n    -moz-transition: all 0.4s;\r\n    transition: all 0.4s;\r\n}\r\n.login100-form-btn:hover  {\r\n    background-color: #333333;\r\n    box-shadow: 0 10px 30px 0px rgba(51, 51, 51, 0.5);\r\n    -moz-box-shadow: 0 10px 30px 0px rgba(51, 51, 51, 0.5);\r\n    -webkit-box-shadow: 0 10px 30px 0px rgba(51, 51, 51, 0.5);\r\n    -o-box-shadow: 0 10px 30px 0px rgba(51, 51, 51, 0.5);\r\n    -ms-box-shadow: 0 10px 30px 0px rgba(51, 51, 51, 0.5);\r\n}\r\n.login-more {\r\n    margin-top: 10%;\r\n}\r\n\r\n.login-more li {\r\n    position: relative;\r\n    padding-left: 16px;\r\n}\r\n\r\n.login-more li::before {\r\n    content: \"\";\r\n    display: block;\r\n    position: absolute;\r\n    width: 5px;\r\n    height: 5px;\r\n    border-radius: 50%;\r\n    background-color: #cccccc;\r\n    top: 45%;\r\n    -webkit-transform: translateY(-50%);\r\n    -moz-transform: translateY(-50%);\r\n    -ms-transform: translateY(-50%);\r\n    -o-transform: translateY(-50%);\r\n    transform: translateY(-50%);\r\n    left: 0;\r\n}\r\n.txt1 {\r\n    font-size: 15px;\r\n    color: #999999;\r\n    line-height: 1.5;\r\n}\r\n\r\n.txt2 {\r\n    font-size: 15px;\r\n    color: #57b846;\r\n    line-height: 1.5;\r\n}\r\n\r\nul, li {\r\n    margin: 0px;\r\n    list-style-type: none;\r\n}\r\n\r\na:hover {\r\n    text-decoration: none;\r\n    color: #333333;\r\n}\r\n\r\nbutton{\r\n    cursor: pointer;\r\n}",
                    "styleUrl": "./reset-password.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loginService",
                        "type": "HomeLoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "HomeLoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-6 mb-2\">\r\n            <img class=\"img-fluid d-none d-sm-block mt-4\"\r\n                src=\"https://100noticia.com.br/wp-content/uploads/2019/08/20190819_081114.jpg\" alt=\"Welcome\">\r\n        </div>\r\n\r\n        <div class=\"col-md-6\">\r\n            <h4 class=\"text-center mt-4\">Recuperar Senha</h4>\r\n\r\n            <form [formGroup]=\"loginForm\" class=\"form mt-4\" (submit)=\"sendEmail()\">\r\n\r\n                <div class=\"form-group\">\r\n                    <input formControlName=\"email\" class=\"form-control\" placeholder=\"e-mail\" autofocus>\r\n             \r\n            </div>\r\n\r\n                <button [disabled]=\"loginForm.invalid\" type=\"submit\" class=\"btn btn-primary btn-block\">\r\n                   Enviar e-mail\r\n                </button>\r\n\r\n\r\n            </form>  \r\n                \r\n            \r\n            <p class=\"form mt-3\">Não é um usuário?<a [routerLink]=\"['../register']\"  > Cadastre-se</a></p>\r\n        </div>\r\n    </div>\r\n</div> -->\r\n\r\n<div class=\"w-100 h-100\">\r\n    <div class=\"d-flex justify-content-center\">\r\n      <div>\r\n        <h2 class=\"text-center mt-5\">Redefinir senha</h2>\r\n        <div class=\"d-flex justify-content-center\">\r\n          <i class=\"material-icons\" style=\"font-size: 100px\">replay</i>\r\n        </div>\r\n        <h6 class=\"text-center mt-2\">Vamos lá, é simples e rápido!</h6>\r\n  \r\n        <div class=\"mt-5\" style=\"min-width: 25vw\">\r\n          <form class=\"example-form\" [formGroup]=\"loginForm\" (submit)=\"sendEmail()\">\r\n            <mat-form-field class=\"example-full-width\">\r\n              <mat-label>E-mail</mat-label>\r\n              <input matInput #message formControlName=\"email\" maxlength=\"256\" placeholder=\"e-mail\" />\r\n            </mat-form-field>\r\n\r\n            <div class=\"container-login100-form-btn mt-3\">\r\n              <button class=\"login100-form-btn\" [disabled]=\"loginForm.invalid\" type=\"submit\">Confirmar</button>\r\n            </div>\r\n          </form>\r\n\r\n          <p class=\"form mt-3\">Não é um usuário?<a [routerLink]=\"['../register']\"  > Cadastre-se</a></p>\r\n      </div>\r\n    </div>\r\n  </div>"
        },
        {
            "name": "SignupComponent",
            "id": "component-SignupComponent-ebb6ecb898642180800edb49dc17afbd",
            "file": "src/app/login-home/signup/signup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./signup.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./signup.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "flag",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "signupForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "signup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { HomeLoginService } from '../login-home.service';\r\nimport { Router } from '@angular/router';\r\nimport { NewUser } from './new-user';\r\n\r\n@Component({\r\n    templateUrl: './signup.component.html',\r\n    styleUrls: ['./signup.component.scss']\r\n})\r\nexport class SignupComponent implements OnInit{\r\n    \r\n    signupForm: FormGroup;\r\n    flag: boolean = true;\r\n\r\n    constructor(private formBuilder: FormBuilder,\r\n         private signupService : HomeLoginService,\r\n         private router : Router) {}\r\n\r\n    ngOnInit(): void {\r\n        this.signupForm = this.formBuilder.group({\r\n            firstName: ['',\r\n                [\r\n                    Validators.required,\r\n                    Validators.minLength(2),\r\n                    Validators.maxLength(70)\r\n                ]\r\n            ],\r\n            lastName: ['',\r\n                [\r\n                    Validators.required,\r\n                    Validators.minLength(2),\r\n                    Validators.maxLength(70)\r\n                ]\r\n            ],\r\n            email: ['',\r\n                [\r\n                    Validators.required,\r\n                    Validators.email\r\n                ]\r\n            ],\r\n            cpf: ['',\r\n                [\r\n                    Validators.required,\r\n                    Validators.minLength(11),\r\n                    Validators.maxLength(11)\r\n                ]\r\n            ],\r\n            phone: ['', Validators.required],\r\n            gender: ['', Validators.required],\r\n            recruiter: ['', Validators.required],\r\n            password: ['',\r\n                [\r\n                    Validators.required,\r\n                    Validators.minLength(3),\r\n                    Validators.maxLength(14)\r\n                ]\r\n            ]\r\n        });\r\n    }\r\n\r\n    signup(){\r\n        const newUser = this.signupForm.getRawValue() as NewUser;\r\n        this.signupService.signup(newUser)\r\n        .subscribe(() => {\r\n            this.flag = false;\r\n        },\r\n        erro => {\r\n            console.log(erro);\r\n            this.signupForm.reset();\r\n        })\r\n    }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-form {\r\n    min-width: 150px;\r\n    max-width: 500px;\r\n    width: 100%;\r\n  }\r\n  \r\n  .example-full-width {\r\n    width: 100%;\r\n  }\r\n  .container-login100-form-btn {\r\n    width: 100%;\r\n    display: -webkit-box;\r\n    display: -webkit-flex;\r\n    display: -moz-box;\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n    flex-wrap: wrap; \r\n    justify-content: center;\r\n  }\r\n  \r\n  .login100-form-btn {\r\n    font-size: 16px;\r\n    color: #fff;\r\n    line-height: 1.2;\r\n    text-transform: uppercase;\r\n  \r\n    display: -webkit-box;\r\n    display: -webkit-flex;\r\n    display: -moz-box;\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 0 20px;\r\n    width: 100%;\r\n    height: 50px;\r\n    background-color: #57b846;\r\n    border-radius: 25px;\r\n    border:0px solid transparent;\r\n  \r\n    box-shadow: 0 10px 30px 0px rgba(87, 184, 70, 0.5);\r\n    -moz-box-shadow: 0 10px 30px 0px rgba(87, 184, 70, 0.5);\r\n    -webkit-box-shadow: 0 10px 30px 0px rgba(87, 184, 70, 0.5);\r\n    -o-box-shadow: 0 10px 30px 0px rgba(87, 184, 70, 0.5);\r\n    -ms-box-shadow: 0 10px 30px 0px rgba(87, 184, 70, 0.5);\r\n  \r\n    -webkit-transition: all 0.4s;\r\n    -o-transition: all 0.4s;\r\n    -moz-transition: all 0.4s;\r\n    transition: all 0.4s;\r\n  }\r\n  .login100-form-btn:hover  {\r\n    background-color: #333333;\r\n    box-shadow: 0 10px 30px 0px rgba(51, 51, 51, 0.5);\r\n    -moz-box-shadow: 0 10px 30px 0px rgba(51, 51, 51, 0.5);\r\n    -webkit-box-shadow: 0 10px 30px 0px rgba(51, 51, 51, 0.5);\r\n    -o-box-shadow: 0 10px 30px 0px rgba(51, 51, 51, 0.5);\r\n    -ms-box-shadow: 0 10px 30px 0px rgba(51, 51, 51, 0.5);\r\n  }\r\n  .login-more {\r\n    margin-top: 10%;\r\n  }\r\n  \r\n  .login-more li {\r\n    position: relative;\r\n    padding-left: 16px;\r\n  }\r\n  \r\n  .login-more li::before {\r\n    content: \"\";\r\n    display: block;\r\n    position: absolute;\r\n    width: 5px;\r\n    height: 5px;\r\n    border-radius: 50%;\r\n    background-color: #cccccc;\r\n    top: 45%;\r\n    -webkit-transform: translateY(-50%);\r\n    -moz-transform: translateY(-50%);\r\n    -ms-transform: translateY(-50%);\r\n    -o-transform: translateY(-50%);\r\n    transform: translateY(-50%);\r\n    left: 0;\r\n  }\r\n  .txt1 {\r\n    font-size: 15px;\r\n    color: #999999;\r\n    line-height: 1.5;\r\n  }\r\n  \r\n  .txt2 {\r\n    font-size: 15px;\r\n    color: #57b846;\r\n    line-height: 1.5;\r\n  }\r\n  \r\n  ul, li {\r\n      margin: 0px;\r\n      list-style-type: none;\r\n  }\r\n  \r\n  a:hover {\r\n      text-decoration: none;\r\n    color: #333333;\r\n  }\r\n  \r\n  button{\r\n    cursor: pointer;\r\n    &:disabled {\r\n      cursor: not-allowed;\r\n      pointer-events: none;\r\n      filter: grayscale(100%);\r\n    }\r\n  }",
                    "styleUrl": "./signup.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "signupService",
                        "type": "HomeLoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "signupService",
                        "type": "HomeLoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"w-100 h-100\">\r\n    <div class=\"d-flex justify-content-center\">\r\n        <div>\r\n            <h2 class=\"text-center mt-5\">Criar usuário</h2>\r\n            <div class=\"d-flex justify-content-center\">\r\n                <i class=\"material-icons\" style=\"font-size: 100px\">face</i> \r\n            </div>\r\n            <h6 class=\"text-center mt-2\">Seja muito bem vindo ao time!</h6>\r\n\r\n            <div class=\"mt-5\" style=\"min-width: 25vw\"  *ngIf = \"flag; else UserRegister\">\r\n                <form class=\"example-form\" [formGroup]=\"signupForm\" (submit)=\"signup()\">\r\n                    <mat-form-field class=\"example-full-width\">\r\n                        <mat-label>Nome</mat-label>\r\n                        <input matInput #message formControlName=\"firstName\" maxlength=\"256\" placeholder=\"nome\" />\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field class=\"example-full-width\">\r\n                        <mat-label>Sobrenome</mat-label>\r\n                        <input matInput #message formControlName=\"lastName\" maxlength=\"256\" placeholder=\"sobrenome\" />\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field class=\"example-full-width\">\r\n                        <mat-label>E-mail</mat-label>\r\n                        <input matInput #message formControlName=\"email\" maxlength=\"256\" placeholder=\"E-mail\" />\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field class=\"example-full-width\">\r\n                        <mat-label>CPF</mat-label>\r\n                        <input matInput #message maxlength=\"256\" formControlName=\"cpf\" mask=\"000.000.000-00\"\r\n                            placeholder=\"CPF\" />\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field class=\"example-full-width\">\r\n                        <mat-label>Telefone</mat-label>\r\n                        <input matInput #message maxlength=\"256\" formControlName=\"phone\" placeholder=\"Telefone\"\r\n                            type=\"number\" />\r\n                    </mat-form-field>\r\n\r\n                    <div class=\"d-flex justify-content-between\">\r\n                        <mat-form-field appearance=\"fill\">\r\n                            <mat-label>Gênero</mat-label>\r\n                            <mat-select formControlName=\"gender\">\r\n                                <mat-option value=\"Masculino\">Masculino</mat-option>\r\n                                <mat-option value=\"Feminino\">Feminino</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field appearance=\"fill\">\r\n                            <mat-label>Recrutador</mat-label>\r\n                            <mat-select formControlName=\"recruiter\">\r\n                                <mat-option value=\"true\">Sim</mat-option>\r\n                                <mat-option value=\"false\">Não</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n\r\n                    <mat-form-field class=\"example-full-width\">\r\n                        <mat-label>Senha</mat-label>\r\n                        <input matInput #message formControlName=\"password\" maxlength=\"256\" placeholder=\"Senha\"\r\n                            type=\"password\" />\r\n                    </mat-form-field>\r\n\r\n                    <!-- <mat-form-field class=\"example-full-width\">\r\n                        <mat-label>Confirmar Senha</mat-label>\r\n                        <input matInput #message maxlength=\"256\" placeholder=\"Confirmar Senha\" type=\"password\" />\r\n                    </mat-form-field> -->\r\n\r\n                    <div class=\"container-login100-form-btn mt-3 mb-5\">\r\n                        <button class=\"login100-form-btn\" [disabled]=\"signupForm.invalid\" type=\"submit\">Criar</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n\r\n            <ng-template #UserRegister>\r\n                <div class=\"col mt-4\">\r\n                    <h4>Usuário criado! Agora é só se<a [routerLink]=\"['']\"> Logar!</a></h4>\r\n                </div>\r\n            </ng-template>\r\n        </div>\r\n    </div>\r\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-391ddeb0257d61595b1c4ffabf7d2140",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { ReactiveFormsModule } from '@angular/forms';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { SharedModule } from 'src/app/shared.module';\r\nimport { AppRoutingModule } from './app.routing.module';\r\nimport { DashboardComponent } from './dashboard/dashboard.component';\r\nimport { HomeModule } from './home/home.module';\r\nimport { HomeLoginModule } from './login-home/home-login.module';\r\nimport { NewJobModule } from './new-job/new-job.module';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { TokenInterceptor } from './token-interceptor';\r\nimport { NewCompanyModule } from './new-company/new-company.module';\r\nimport { CurrencyMaskInputMode, NgxCurrencyModule } from 'ngx-currency';\r\nimport { RegistrationsModule } from './registrations/registrations.module';\r\nimport { MarkdownModule } from 'ngx-markdown';\r\nimport { MyProfileComponent } from './my-profile/my-profile.component';\r\n\r\nexport const customCurrencyMaskConfig = {\r\n  align: \"left\",\r\n  allowNegative: false,\r\n  allowZero: false,\r\n  decimal: \",\",\r\n  precision: 2,\r\n  prefix: \"R$ \",\r\n  suffix: \"\",\r\n  thousands: \".\",\r\n  nullable: true,\r\n  inputMode: CurrencyMaskInputMode.FINANCIAL\r\n};\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DashboardComponent,\r\n    AppComponent,\r\n    MyProfileComponent,\r\n  ],\r\n  imports: [\r\n    AppRoutingModule,\r\n    SharedModule,\r\n    BrowserModule,\r\n    HomeModule,\r\n    HomeLoginModule,\r\n    BrowserAnimationsModule,\r\n    NewJobModule,\r\n    NewCompanyModule,\r\n    RegistrationsModule,\r\n    MarkdownModule.forRoot(),\r\n    NgxCurrencyModule.forRoot(customCurrencyMaskConfig),\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: TokenInterceptor,\r\n      multi: true\r\n    },\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "TokenInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "MyProfileComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "HomeLoginModule"
                        },
                        {
                            "name": "HomeModule"
                        },
                        {
                            "name": "NewCompanyModule"
                        },
                        {
                            "name": "NewJobModule"
                        },
                        {
                            "name": "RegistrationsModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-8b6fd3573b0051250e2db393fbc2e4ff",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.routing.module.ts",
            "methods": [],
            "sourceCode": "import { MyProfileResolver } from './my-profile/my-profile.resolver';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { DashboardComponent } from './dashboard/dashboard.component';\r\nimport { LoginComponent } from './login-home/signin/login.component';\r\nimport { SignupComponent } from './login-home/signup/signup.component';\r\nimport { NewJobComponent } from './new-job/new-job.component';\r\nimport { ResetPasswordComponent } from './login-home/reset-password/reset-password';\r\nimport { NewPasswordComponent } from './login-home/new-senha/new-password';\r\nimport { NewCompanyComponent } from './new-company/new-company.component';\r\nimport { RegistrationsComponent } from './registrations/registrations.component';\r\nimport { LoggedGuard } from './login-home/logged.guard';\r\nimport { MyProfileComponent } from './my-profile/my-profile.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'home',\r\n    component: HomeComponent,\r\n    data: { showSideMenu: true },\r\n    canActivate: [LoggedGuard],\r\n  },\r\n  {\r\n    path: 'register',\r\n    component: SignupComponent,\r\n    data: { showSideMenu: false },\r\n  },\r\n  {\r\n    path: 'profile',\r\n    component: MyProfileComponent,\r\n    data: { showSideMenu: true },\r\n    resolve: { user: MyProfileResolver }\r\n  },\r\n  {\r\n    path: 'newjob',\r\n    component: NewJobComponent,\r\n    data: { showSideMenu: true },\r\n    canActivate: [LoggedGuard],\r\n  },\r\n  {\r\n    path: 'resetpassword',\r\n    component: ResetPasswordComponent,\r\n    data: { showSideMenu: false }\r\n  },\r\n  {\r\n    path: '',\r\n    component: LoginComponent,\r\n    data: { showSideMenu: false }\r\n  },\r\n  {\r\n    path: 'reset-password',\r\n    component: NewPasswordComponent,\r\n    data: { showSideMenu: false }\r\n  },\r\n  {\r\n    path: 'newcompany',\r\n    component: NewCompanyComponent,\r\n    data: { showSideMenu: true },\r\n    canActivate: [LoggedGuard],\r\n  },\r\n  {\r\n    path: 'myregister',\r\n    component: RegistrationsComponent,\r\n    data: { showSideMenu: true },\r\n    canActivate: [LoggedGuard],\r\n  },\r\n  { path: 'dashboard', component: DashboardComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeLoginModule",
            "id": "module-HomeLoginModule-00c7ea187137bc3421b9cf4578e4b840",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/login-home/home-login.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { LoginComponent } from './signin/login.component';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SignupComponent } from './signup/signup.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { SharedModule } from 'src/app/shared.module';\r\nimport { ResetPasswordComponent } from './reset-password/reset-password';\r\nimport { NewPasswordComponent } from './new-senha/new-password';\r\n\r\n\r\n@NgModule({\r\n    declarations: [LoginComponent, SignupComponent, ResetPasswordComponent, NewPasswordComponent],\r\n    imports: [HttpClientModule, ReactiveFormsModule, SharedModule, CommonModule, RouterModule, FormsModule,\r\n        ]\r\n})\r\nexport class HomeLoginModule {\r\n\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "NewPasswordComponent"
                        },
                        {
                            "name": "ResetPasswordComponent"
                        },
                        {
                            "name": "SignupComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeModule",
            "id": "module-HomeModule-7285fa063900a981c03497073ba81eb0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/home/home.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { HomeComponent } from './home.component';\r\nimport { SharedModule } from 'src/app/shared.module';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { JobListComponent } from './job-list/job-list.component';\r\nimport { FilterByJob } from './filter-by-job.pipe';\r\nimport { FilterByDescription } from './job-list/filter-by-description.pipe';\r\nimport { JobCardComponent } from './job-list/job-card/job-card.component';\r\nimport { JobDescriptorComponent } from './job-descriptor/job-descriptor.component';\r\nimport { MarkdownModule } from 'ngx-markdown';\nimport { JobSearchComponent } from './job-search/job-search.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    HomeComponent,\r\n    JobListComponent,\r\n    FilterByJob,\r\n    FilterByDescription,\r\n    JobCardComponent,\r\n    JobDescriptorComponent,\r\n    JobSearchComponent],\r\n  imports: [\r\n    HttpClientModule,\r\n    FormsModule,\r\n    SharedModule,\r\n    CommonModule,\r\n    MarkdownModule.forChild(),\r\n  ],\r\n})\r\nexport class HomeModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FilterByDescription"
                        },
                        {
                            "name": "FilterByJob"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "JobCardComponent"
                        },
                        {
                            "name": "JobDescriptorComponent"
                        },
                        {
                            "name": "JobListComponent"
                        },
                        {
                            "name": "JobSearchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NewCompanyModule",
            "id": "module-NewCompanyModule-bb058f9d6ef8e46c11bd083b5c83c5ae",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/new-company/new-company.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule, FormsModule} from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { SharedModule } from 'src/app/shared.module';\r\nimport { NewCompanyComponent } from './new-company.component';\r\nimport { NewCompanyService } from './new-company.service';\r\n\r\n\r\n@NgModule({\r\n    declarations: [NewCompanyComponent],\r\n    imports: [ ReactiveFormsModule, CommonModule, RouterModule, FormsModule, HttpClientModule, SharedModule],\r\n\r\n    providers: [\r\n      NewCompanyService\r\n      ]\r\n})\r\nexport class NewCompanyModule{\r\n\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "NewCompanyService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NewCompanyComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NewJobModule",
            "id": "module-NewJobModule-3d7e546956efbbbc78998436e40b8aba",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/new-job/new-job.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule, FormsModule} from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { NewJobComponent } from './new-job.component';\r\nimport { NewJobService } from './new-job.service';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { SharedModule } from 'src/app/shared.module';\r\nimport { CurrencyMaskInputMode, NgxCurrencyModule } from 'ngx-currency';\r\n\r\n@NgModule({\r\n    declarations: [NewJobComponent],\r\n    imports: [ ReactiveFormsModule, CommonModule, RouterModule, FormsModule, HttpClientModule, SharedModule, NgxCurrencyModule],\r\n    providers: [\r\n        NewJobService\r\n      ]\r\n})\r\nexport class NewJobModule{\r\n\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "NewJobService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NewJobComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RegistrationsModule",
            "id": "module-RegistrationsModule-6d2413bef530574ca62090b305fb9c03",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/registrations/registrations.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule, FormsModule} from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { SharedModule } from 'src/app/shared.module';\r\nimport { CurrencyMaskInputMode, NgxCurrencyModule } from 'ngx-currency';\r\nimport { RegistrationsService } from './registrations.service';\r\nimport { RegistrationsComponent } from './registrations.component';\r\n\r\n@NgModule({\r\n    declarations: [RegistrationsComponent],\r\n    imports: [ ReactiveFormsModule, CommonModule, RouterModule, FormsModule, HttpClientModule, SharedModule, NgxCurrencyModule],\r\n    providers: [\r\n      RegistrationsService\r\n      ]\r\n})\r\nexport class RegistrationsModule{\r\n\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "RegistrationsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RegistrationsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-09a5a96503a5325dd6ffdc039d89124f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared.module.ts",
            "methods": [],
            "sourceCode": "import { ReactiveFormsModule } from '@angular/forms';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n//Angular Material Components\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\r\nimport {MatDatepickerModule} from '@angular/material/datepicker';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatRadioModule} from '@angular/material/radio';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatSliderModule} from '@angular/material/slider';\r\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport {MatSidenavModule} from '@angular/material/sidenav';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport {MatGridListModule} from '@angular/material/grid-list';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatStepperModule} from '@angular/material/stepper';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\r\nimport {MatChipsModule} from '@angular/material/chips';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatTooltipModule} from '@angular/material/tooltip';\r\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\r\nimport {MatTableModule} from '@angular/material/table';\r\nimport {MatSortModule} from '@angular/material/sort';\r\nimport {MatPaginatorModule} from '@angular/material/paginator';\r\nimport { AsyncLoading } from '../shared/pipes/async-loading.pipe';\r\nimport { NgxMaskModule } from 'ngx-mask';\r\nimport { EllipsisPipe } from 'src/shared/pipes/ellipsis.pipe';\r\n\r\nconst matModules = [\r\n  MatCheckboxModule,\r\n  MatCheckboxModule,\r\n  MatButtonModule,\r\n  MatInputModule,\r\n  MatAutocompleteModule,\r\n  MatDatepickerModule,\r\n  MatFormFieldModule,\r\n  MatRadioModule,\r\n  MatSelectModule,\r\n  MatSliderModule,\r\n  MatSlideToggleModule,\r\n  MatMenuModule,\r\n  MatSidenavModule,\r\n  MatToolbarModule,\r\n  MatListModule,\r\n  MatGridListModule,\r\n  MatCardModule,\r\n  MatStepperModule,\r\n  MatTabsModule,\r\n  MatExpansionModule,\r\n  MatButtonToggleModule,\r\n  MatChipsModule,\r\n  MatIconModule,\r\n  MatProgressSpinnerModule,\r\n  MatProgressBarModule,\r\n  MatDialogModule,\r\n  MatTooltipModule,\r\n  MatSnackBarModule,\r\n  MatTableModule,\r\n  MatSortModule,\r\n  MatPaginatorModule\r\n]\r\n@NgModule({\r\n  declarations: [\r\n    AsyncLoading,\r\n    EllipsisPipe\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    ...matModules,\r\n    NgxMaskModule.forRoot(),\r\n    ReactiveFormsModule\r\n  ],\r\n  exports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    AsyncLoading,\r\n    ReactiveFormsModule,\r\n    EllipsisPipe,\r\n    NgxMaskModule,\r\n    ...matModules,\r\n  ],\r\n  providers: [],\r\n})\r\nexport class SharedModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AsyncLoading"
                        },
                        {
                            "name": "EllipsisPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AsyncLoading"
                        },
                        {
                            "name": "EllipsisPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "API_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/login-home/login-home.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "environment.api + '/auth/'"
            },
            {
                "name": "API_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/new-company/new-company.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "env.api + '/users/'"
            },
            {
                "name": "API_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/new-job/new-job.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "env.api + '/jobs/'"
            },
            {
                "name": "API_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/job-list/job-list.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "environment.api + '/jobs'"
            },
            {
                "name": "API_URL_COMPANIE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/new-job/new-job.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "env.api + '/users/'"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "customCurrencyMaskConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  align: \"left\",\r\n  allowNegative: false,\r\n  allowZero: false,\r\n  decimal: \",\",\r\n  precision: 2,\r\n  prefix: \"R$ \",\r\n  suffix: \"\",\r\n  thousands: \".\",\r\n  nullable: true,\r\n  inputMode: CurrencyMaskInputMode.FINANCIAL\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/my-profile/my-profile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/job-descriptor/job-descriptor.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/job-list/job-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  api: 'http://localhost:8080',\n\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  api: 'http://localhost:8080',\n}"
            },
            {
                "name": "jobListStub",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/job-list/job-list.stub.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Partial<JobListService>",
                "defaultValue": "{\r\n  getJob: () => of({\r\n    \"id\": 1,\r\n    \"title\": \"Desenvolvedor Angular JR\",\r\n    \"description\": \"Analista desenvolvedor de React focado em aprender novas experiências e se dedicar à equipe de forma que trabalhar seja a única coisa que deseja em sua vida\",\r\n    \"fullDescription\": `    # Somos movidos por histórias ❤\r\n\r\n    ## A bank, an universe\r\n\r\n    Nubank was born from a simple idea: everyone should have control over their own money.\r\n    We enable millions of Latin Americans to live better by freeing our customers from a\r\n    bureaucratic, slow, and inefficient traditional banking system. With operations in Brazil,\r\n    [Mexico](https://www.visitmexico.com/), Colombia, and offices in Argentina, Germany, and the United States, Nubank is the\r\n    world's largest independent digital bank, reinventing over 40 million customers' financial\r\n    lives.\r\n\r\n    ## Engineering at Nubank\r\n\r\n    We strive for state-of-the-art software development practices,\r\n    that currently includes a variety of technologies. While we value\r\n    candidates that are familiar with them, we are also confident that\r\n    software engineers who are interested in joining Nubank will be\r\n    able to learn from our team.\r\n\r\n    > Horizontally scalable microservices written mostly in Clojure, using Finagle and leveraging upon functional programming techniques and hexagonal architecture\r\n    > High throughput jobs and inter-service communication using Kafka\r\n    > Continuous Integration and Deployment into AWS\r\n    > Storing data in Datomic and DynamoDB\r\n    > Monitoring and observability with Prometheus\r\n    > Running as much as possible in Kubernetes\r\n\r\n    ### Benefits\r\n    - Health, dental and life insurance\r\n    - Meal allowance\r\n    - Transportation assistance\r\n    - 30 days of paid vacation\r\n    - Equity at Nubank\r\n    - Parking partnership - discounted parking in our office\r\n    - Free bike parking with showers available\r\n    - NuCare - Our mental health and wellness assistance program\r\n    - NuLanguage - Our language learning program\r\n    - Gympass partnership\r\n    - Extended maternity and paternity Leaves\r\n    - Child care allowance\r\n    - ‘Espaço Feijão’- Private nursing and breastfeeding spaces in our buildings\r\n    - Onsite Health Center - Medical support for every Nubanker in our office\r\n\r\n    `,\r\n    \"salary\": 5000.0,\r\n    \"knowledges\": [\r\n      {\r\n        \"id\": 1,\r\n        \"name\": \"Angular\",\r\n      }\r\n    ],\r\n    \"company\": {\r\n      \"id\": 1,\r\n      \"name\": \"Banco basculhao\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"street\": null,\r\n      \"number\": 12,\r\n      \"complement\": \"\",\r\n      \"logoUrl\": \"https://pbs.twimg.com/profile_images/1435308291756802049/5aNaRJtl_400x400.jpg\"\r\n    }\r\n  } as JobDetailsModel).pipe(\r\n    delay(1000)\r\n  ),\r\n\r\n  getJobs: () => of([\r\n    {\r\n      \"id\": 1,\r\n      \"title\": \"Desenvolvedor Angular JR\",\r\n      \"description\": \"Analista desenvolvedor de React focado em aprender novas experiências e se dedicar à equipe de forma que trabalhar seja a única coisa que deseja em sua vida\",\r\n      \"salary\": 5000,\r\n      \"knowledges\": [\r\n        {\r\n          \"id\": 1,\r\n          \"name\": \"Angular\",\r\n          \"jobs\": []\r\n        }\r\n      ],\r\n      \"city\": \"São Paulo\",\r\n      \"companyLogo\": \"https://pbs.twimg.com/profile_images/1435308291756802049/5aNaRJtl_400x400.jpg\"\r\n    }\r\n  ])\r\n}"
            },
            {
                "name": "loginHomeServiceStub",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/login-home/login-home.service.stub.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Partial<HomeLoginService>",
                "defaultValue": "{\r\n  reloadUser: () => of(true).pipe(\r\n    delay(1500)\r\n  )\r\n}"
            },
            {
                "name": "matModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  MatCheckboxModule,\r\n  MatCheckboxModule,\r\n  MatButtonModule,\r\n  MatInputModule,\r\n  MatAutocompleteModule,\r\n  MatDatepickerModule,\r\n  MatFormFieldModule,\r\n  MatRadioModule,\r\n  MatSelectModule,\r\n  MatSliderModule,\r\n  MatSlideToggleModule,\r\n  MatMenuModule,\r\n  MatSidenavModule,\r\n  MatToolbarModule,\r\n  MatListModule,\r\n  MatGridListModule,\r\n  MatCardModule,\r\n  MatStepperModule,\r\n  MatTabsModule,\r\n  MatExpansionModule,\r\n  MatButtonToggleModule,\r\n  MatChipsModule,\r\n  MatIconModule,\r\n  MatProgressSpinnerModule,\r\n  MatProgressBarModule,\r\n  MatDialogModule,\r\n  MatTooltipModule,\r\n  MatSnackBarModule,\r\n  MatTableModule,\r\n  MatSortModule,\r\n  MatPaginatorModule\r\n]"
            },
            {
                "name": "NotValidEmail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/my-profile/my-profile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/my-profile/my-profile.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MyProfileComponent>",
                "defaultValue": "(args: MyProfileComponent) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/job-descriptor/job-descriptor.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<JobDescriptorComponent>",
                "defaultValue": "(args: JobDescriptorComponent) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/job-list/job-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<JobListComponent>",
                "defaultValue": "(args: JobListComponent) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Três_Cards",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/job-list/job-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Vazio",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/job-list/job-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/login-home/login-home.service.ts": [
                {
                    "name": "API_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/login-home/login-home.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "environment.api + '/auth/'"
                }
            ],
            "src/app/new-company/new-company.service.ts": [
                {
                    "name": "API_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/new-company/new-company.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "env.api + '/users/'"
                }
            ],
            "src/app/new-job/new-job.service.ts": [
                {
                    "name": "API_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/new-job/new-job.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "env.api + '/jobs/'"
                },
                {
                    "name": "API_URL_COMPANIE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/new-job/new-job.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "env.api + '/users/'"
                }
            ],
            "src/app/home/job-list/job-list.service.ts": [
                {
                    "name": "API_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/job-list/job-list.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "environment.api + '/jobs'"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "customCurrencyMaskConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  align: \"left\",\r\n  allowNegative: false,\r\n  allowZero: false,\r\n  decimal: \",\",\r\n  precision: 2,\r\n  prefix: \"R$ \",\r\n  suffix: \"\",\r\n  thousands: \".\",\r\n  nullable: true,\r\n  inputMode: CurrencyMaskInputMode.FINANCIAL\r\n}"
                }
            ],
            "src/app/my-profile/my-profile.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/my-profile/my-profile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "NotValidEmail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/my-profile/my-profile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/my-profile/my-profile.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MyProfileComponent>",
                    "defaultValue": "(args: MyProfileComponent) => ({\r\n  props: args\r\n})"
                }
            ],
            "src/app/home/job-descriptor/job-descriptor.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/job-descriptor/job-descriptor.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/job-descriptor/job-descriptor.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<JobDescriptorComponent>",
                    "defaultValue": "(args: JobDescriptorComponent) => ({\r\n  props: args\r\n})"
                }
            ],
            "src/app/home/job-list/job-list.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/job-list/job-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/job-list/job-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<JobListComponent>",
                    "defaultValue": "(args: JobListComponent) => ({\r\n  props: args\r\n})"
                },
                {
                    "name": "Três_Cards",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/job-list/job-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Vazio",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/job-list/job-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  api: 'http://localhost:8080',\n\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  api: 'http://localhost:8080',\n}"
                }
            ],
            "src/app/home/job-list/job-list.stub.ts": [
                {
                    "name": "jobListStub",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/job-list/job-list.stub.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<JobListService>",
                    "defaultValue": "{\r\n  getJob: () => of({\r\n    \"id\": 1,\r\n    \"title\": \"Desenvolvedor Angular JR\",\r\n    \"description\": \"Analista desenvolvedor de React focado em aprender novas experiências e se dedicar à equipe de forma que trabalhar seja a única coisa que deseja em sua vida\",\r\n    \"fullDescription\": `    # Somos movidos por histórias ❤\r\n\r\n    ## A bank, an universe\r\n\r\n    Nubank was born from a simple idea: everyone should have control over their own money.\r\n    We enable millions of Latin Americans to live better by freeing our customers from a\r\n    bureaucratic, slow, and inefficient traditional banking system. With operations in Brazil,\r\n    [Mexico](https://www.visitmexico.com/), Colombia, and offices in Argentina, Germany, and the United States, Nubank is the\r\n    world's largest independent digital bank, reinventing over 40 million customers' financial\r\n    lives.\r\n\r\n    ## Engineering at Nubank\r\n\r\n    We strive for state-of-the-art software development practices,\r\n    that currently includes a variety of technologies. While we value\r\n    candidates that are familiar with them, we are also confident that\r\n    software engineers who are interested in joining Nubank will be\r\n    able to learn from our team.\r\n\r\n    > Horizontally scalable microservices written mostly in Clojure, using Finagle and leveraging upon functional programming techniques and hexagonal architecture\r\n    > High throughput jobs and inter-service communication using Kafka\r\n    > Continuous Integration and Deployment into AWS\r\n    > Storing data in Datomic and DynamoDB\r\n    > Monitoring and observability with Prometheus\r\n    > Running as much as possible in Kubernetes\r\n\r\n    ### Benefits\r\n    - Health, dental and life insurance\r\n    - Meal allowance\r\n    - Transportation assistance\r\n    - 30 days of paid vacation\r\n    - Equity at Nubank\r\n    - Parking partnership - discounted parking in our office\r\n    - Free bike parking with showers available\r\n    - NuCare - Our mental health and wellness assistance program\r\n    - NuLanguage - Our language learning program\r\n    - Gympass partnership\r\n    - Extended maternity and paternity Leaves\r\n    - Child care allowance\r\n    - ‘Espaço Feijão’- Private nursing and breastfeeding spaces in our buildings\r\n    - Onsite Health Center - Medical support for every Nubanker in our office\r\n\r\n    `,\r\n    \"salary\": 5000.0,\r\n    \"knowledges\": [\r\n      {\r\n        \"id\": 1,\r\n        \"name\": \"Angular\",\r\n      }\r\n    ],\r\n    \"company\": {\r\n      \"id\": 1,\r\n      \"name\": \"Banco basculhao\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"street\": null,\r\n      \"number\": 12,\r\n      \"complement\": \"\",\r\n      \"logoUrl\": \"https://pbs.twimg.com/profile_images/1435308291756802049/5aNaRJtl_400x400.jpg\"\r\n    }\r\n  } as JobDetailsModel).pipe(\r\n    delay(1000)\r\n  ),\r\n\r\n  getJobs: () => of([\r\n    {\r\n      \"id\": 1,\r\n      \"title\": \"Desenvolvedor Angular JR\",\r\n      \"description\": \"Analista desenvolvedor de React focado em aprender novas experiências e se dedicar à equipe de forma que trabalhar seja a única coisa que deseja em sua vida\",\r\n      \"salary\": 5000,\r\n      \"knowledges\": [\r\n        {\r\n          \"id\": 1,\r\n          \"name\": \"Angular\",\r\n          \"jobs\": []\r\n        }\r\n      ],\r\n      \"city\": \"São Paulo\",\r\n      \"companyLogo\": \"https://pbs.twimg.com/profile_images/1435308291756802049/5aNaRJtl_400x400.jpg\"\r\n    }\r\n  ])\r\n}"
                }
            ],
            "src/app/login-home/login-home.service.stub.ts": [
                {
                    "name": "loginHomeServiceStub",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/login-home/login-home.service.stub.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<HomeLoginService>",
                    "defaultValue": "{\r\n  reloadUser: () => of(true).pipe(\r\n    delay(1500)\r\n  )\r\n}"
                }
            ],
            "src/app/shared.module.ts": [
                {
                    "name": "matModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  MatCheckboxModule,\r\n  MatCheckboxModule,\r\n  MatButtonModule,\r\n  MatInputModule,\r\n  MatAutocompleteModule,\r\n  MatDatepickerModule,\r\n  MatFormFieldModule,\r\n  MatRadioModule,\r\n  MatSelectModule,\r\n  MatSliderModule,\r\n  MatSlideToggleModule,\r\n  MatMenuModule,\r\n  MatSidenavModule,\r\n  MatToolbarModule,\r\n  MatListModule,\r\n  MatGridListModule,\r\n  MatCardModule,\r\n  MatStepperModule,\r\n  MatTabsModule,\r\n  MatExpansionModule,\r\n  MatButtonToggleModule,\r\n  MatChipsModule,\r\n  MatIconModule,\r\n  MatProgressSpinnerModule,\r\n  MatProgressBarModule,\r\n  MatDialogModule,\r\n  MatTooltipModule,\r\n  MatSnackBarModule,\r\n  MatTableModule,\r\n  MatSortModule,\r\n  MatPaginatorModule\r\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app.routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "home",
                        "component": "HomeComponent",
                        "data": {
                            "showSideMenu": true
                        },
                        "canActivate": [
                            "LoggedGuard"
                        ]
                    },
                    {
                        "path": "register",
                        "component": "SignupComponent",
                        "data": {
                            "showSideMenu": false
                        }
                    },
                    {
                        "path": "profile",
                        "component": "MyProfileComponent",
                        "data": {
                            "showSideMenu": true
                        },
                        "resolve": {
                            "user": "MyProfileResolver"
                        }
                    },
                    {
                        "path": "newjob",
                        "component": "NewJobComponent",
                        "data": {
                            "showSideMenu": true
                        },
                        "canActivate": [
                            "LoggedGuard"
                        ]
                    },
                    {
                        "path": "resetpassword",
                        "component": "ResetPasswordComponent",
                        "data": {
                            "showSideMenu": false
                        }
                    },
                    {
                        "path": "",
                        "component": "LoginComponent",
                        "data": {
                            "showSideMenu": false
                        }
                    },
                    {
                        "path": "reset-password",
                        "component": "NewPasswordComponent",
                        "data": {
                            "showSideMenu": false
                        }
                    },
                    {
                        "path": "newcompany",
                        "component": "NewCompanyComponent",
                        "data": {
                            "showSideMenu": true
                        },
                        "canActivate": [
                            "LoggedGuard"
                        ]
                    },
                    {
                        "path": "myregister",
                        "component": "RegistrationsComponent",
                        "data": {
                            "showSideMenu": true
                        },
                        "canActivate": [
                            "LoggedGuard"
                        ]
                    },
                    {
                        "path": "dashboard",
                        "component": "DashboardComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customCurrencyMaskConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cookie.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CookieService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/globals.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MyService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/home/filter-by-job.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FilterByJob",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/home/job-descriptor/job-descriptor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JobDescriptorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/home/job-descriptor/job-descriptor.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/job-descriptor/job-descriptor.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/job-list/filter-by-description.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FilterByDescription",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/job-list/job-card/job-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JobCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/home/job-list/job-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JobListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/home/job-list/job-list.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CompanyModel",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/home/job-list/job-list.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "JobDetailsModel",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/home/job-list/job-list.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "JobModel",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/home/job-list/job-list.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Knowledge",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/home/job-list/job-list.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "JobListService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/home/job-list/job-list.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "API_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/job-list/job-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/job-list/job-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/job-list/job-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Três_Cards",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/job-list/job-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Vazio",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/job-list/job-list.stub.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "jobListStub",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/job-search/job-search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JobSearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/login-home/logged.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "LoggedGuard",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/login-home/login-home.service.stub.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginHomeServiceStub",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/login-home/login-home.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HomeLoginService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/login-home/login-home.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "API_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/login-home/new-senha/new-password.ts",
                "type": "component",
                "linktype": "component",
                "name": "NewPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/login-home/reset-password/reset-password.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResetPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/login-home/signin/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/login-home/signup/new-user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NewUser",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/login-home/signup/signup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/login-home/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Role",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/login-home/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Token",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/login-home/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/my-profile/my-profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MyProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/my-profile/my-profile.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "MyProfileResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/my-profile/my-profile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/my-profile/my-profile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NotValidEmail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/my-profile/my-profile.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/new-company/new-company.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NewCompanyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/new-company/new-company.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CompanyModel",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/new-company/new-company.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NewCompanyService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/new-company/new-company.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "API_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/new-job/new-job.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NewJobComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/new-job/new-job.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICategoria",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/new-job/new-job.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IParam",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/new-job/new-job.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NewJob",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/new-job/new-job.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TypeJob",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/new-job/new-job.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TypeSalary",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/new-job/new-job.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NewJobService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/new-job/new-job.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "API_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/new-job/new-job.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "API_URL_COMPANIE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/registrations/registrations.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegistrationsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/registrations/registrations.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Registrations",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/registrations/registrations.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RegistrationsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "matModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/token-interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "TokenInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/pipes/async-loading.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "AsyncLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/pipes/ellipsis.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "EllipsisPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}